{
    "count": 123,
    "next": null,
    "previous": null,
    "results": [
        {
            "endpoint_id": 1,
            "page_id": 1,
            "order": 1,
            "example_endpoint_url": "/api/v1/college-university/ipeds/directory/2003/",
            "endpoint_url": "/api/v1/college-university/ipeds/directory/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": null,
            "sub_topic": "Directory",
            "datasource_id": 1,
            "years_available": "1980, 1984&ndash;2022",
            "description": "This file contains directory information for every institution in the IPEDS universe.  This includes name, address, city, state, zip code, and various URL links to the institution's home page, admissions, financial aid offices, and  the net price calculator.  Identifies institutions as currently active and institutions that participate in Title IV federal financial aid programs for which IPEDS is mandatory.  It also includes variables derived from the Institutional Characteristics survey, such as control and level of institution, highest level and highest degree offered and Carnegie classifications.",
            "var_list_id": 1,
            "stata_code": "educationdata using \\\"college ipeds directory\\\", sub(year=2003)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"directory\\\",\\nfilters = list(year = 2003))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 24,
            "page_id": 2,
            "order": 1,
            "example_endpoint_url": "/api/v1/schools/ccd/directory/1988/",
            "endpoint_url": "/api/v1/schools/ccd/directory/{year}/",
            "section": "Schools",
            "class_name": "CCD",
            "topic": null,
            "sub_topic": "Directory",
            "datasource_id": 2,
            "years_available": "1986&ndash;2022",
            "description": "This endpoint contains school-level information on location, mailing addresses, school types, highest and lowest grades offered, and free and reduced-price lunch.  This endpoint also contains the school-level data on the number of full-time eqivalent teachers.",
            "var_list_id": 18,
            "stata_code": "educationdata using \\\"school ccd directory\\\", sub(year=1988)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"directory\\\",\\nfilters = list(year = 1988))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 54,
            "page_id": 3,
            "order": 1,
            "example_endpoint_url": "/api/v1/school-districts/ccd/directory/2013/",
            "endpoint_url": "/api/v1/school-districts/ccd/directory/{year}/",
            "section": "School_districts",
            "class_name": "CCD",
            "topic": null,
            "sub_topic": "Directory",
            "datasource_id": 2,
            "years_available": "1986&ndash;2022",
            "description": "This endpoint contains school district (local education agency identification)-level geographic and mailing information, agency type, highest and lowest grades offered, special education students and English language learners, and full-time equivalent teachers and other staff.",
            "var_list_id": 36,
            "stata_code": "educationdata using \\\"district ccd directory\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"directory\\\",\\nfilters = list(year = 2013))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 2,
            "page_id": 1,
            "order": 2,
            "example_endpoint_url": "/api/v1/college-university/ipeds/institutional-characteristics/1990/",
            "endpoint_url": "/api/v1/college-university/ipeds/institutional-characteristics/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": null,
            "sub_topic": "Institutional Characteristics",
            "datasource_id": 1,
            "years_available": "1980, 1984&ndash;2022",
            "description": "This endpoint contains data on program and award level offerings, control and affiliation of institution. It also contains information on special learning opportunities, student services, disability services, tuition plans and athletic conference associations. Services and programs for service members and veterans are also included.",
            "var_list_id": 2,
            "stata_code": "educationdata using \\\"college ipeds institutional-characteristics\\\", sub(year=1990)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"institutional-characteristics\\\",\\nfilters = list(year = 1990))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 25,
            "page_id": 2,
            "order": 2,
            "example_endpoint_url": "/api/v1/schools/ccd/enrollment/2014/grade-8/",
            "endpoint_url": "/api/v1/schools/ccd/enrollment/{year}/{grade}/",
            "section": "Schools",
            "class_name": "CCD",
            "topic": "Enrollment",
            "sub_topic": "By grade",
            "datasource_id": 2,
            "years_available": "1986&ndash;2022",
            "description": "This endpoint contains student membership data for each school by grade. Only operational schools serving one or more grades are required to report membership and only these are included in this endpoint.",
            "var_list_id": 19,
            "stata_code": "educationdata using \\\"school ccd enrollment\\\", sub(year=2014 grade=8)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2014, grade = 8))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 56,
            "page_id": 3,
            "order": 2,
            "example_endpoint_url": "/api/v1/school-districts/ccd/enrollment/2014/grade-8/",
            "endpoint_url": "/api/v1/school-districts/ccd/enrollment/{year}/{grade}/",
            "section": "School_districts",
            "class_name": "CCD",
            "topic": "Enrollment",
            "sub_topic": "By grade",
            "datasource_id": 2,
            "years_available": "1986&ndash;2022",
            "description": "This endpoint contains student membership data for each school district by grade.",
            "var_list_id": 37,
            "stata_code": "educationdata using \\\"district ccd enrollment\\\", sub(year=2014 grade=8)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2014, grade = 8))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 3,
            "page_id": 1,
            "order": 3,
            "example_endpoint_url": "/api/v1/college-university/ipeds/admissions-enrollment/2001/",
            "endpoint_url": "/api/v1/college-university/ipeds/admissions-enrollment/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Admissions",
            "sub_topic": "Applications, admissions, and enrollments",
            "datasource_id": 1,
            "years_available": "2001&ndash;2022",
            "description": "This endpoint contains data on applicants and admissions by sex and enrollees by sex and full-time/part-time status. These data are limited to undergraduate first-time, degree- or certificate-seeking students.\n",
            "var_list_id": 3,
            "stata_code": "educationdata using \\\"college ipeds admissions-enrollment\\\", sub(year=2001)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"admissions-enrollment\\\",\\nfilters = list(year = 2001))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 26,
            "page_id": 2,
            "order": 3,
            "example_endpoint_url": "/api/v1/schools/ccd/enrollment/2013/grade-3/race/",
            "endpoint_url": "/api/v1/schools/ccd/enrollment/{year}/{grade}/race/",
            "section": "Schools",
            "class_name": "CCD",
            "topic": "Enrollment",
            "sub_topic": "By grade and race",
            "datasource_id": 2,
            "years_available": "1986&ndash;2022",
            "description": "This endpoint contains student membership data for each school by grade and race. Only operational schools serving one or more grades are required to report membership and only these are included in this endpoint.",
            "var_list_id": 19,
            "stata_code": "educationdata using \\\"school ccd enrollment race\\\", sub(year=2013 grade=3)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2013, grade = 3),\\nsubtopic = list(\\\"race\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 58,
            "page_id": 3,
            "order": 3,
            "example_endpoint_url": "/api/v1/school-districts/ccd/enrollment/2013/grade-3/race/",
            "endpoint_url": "/api/v1/school-districts/ccd/enrollment/{year}/{grade}/race/",
            "section": "School_districts",
            "class_name": "CCD",
            "topic": "Enrollment",
            "sub_topic": "By grade and race",
            "datasource_id": 2,
            "years_available": "1986&ndash;2022",
            "description": "This endpoint contains student membership data for each school district by grade and race.",
            "var_list_id": 37,
            "stata_code": "educationdata using \\\"district ccd enrollment race\\\", sub(year=2013 grade=3)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2013, grade = 3),\\nsubtopic = list(\\\"race\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 4,
            "page_id": 1,
            "order": 4,
            "example_endpoint_url": "/api/v1/college-university/ipeds/admissions-requirements/2016/",
            "endpoint_url": "/api/v1/college-university/ipeds/admissions-requirements/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Admissions",
            "sub_topic": "Requirements",
            "datasource_id": 1,
            "years_available": "1990&ndash;2022",
            "description": "This endpoint contains data on admissions considerations for the undergraduate selection process. SAT and ACT test scores are included for institutions that require test scores for admission. These data are applicable for institutions that do not have an open admissions policy for entering first-time students. Writing scores for both SAT and ACT are no longer collected. The possible values for the admission consideration variables have changed from prior data.  \"Do not know\" is no longer an option and \"considered but not required\" was added.",
            "var_list_id": 4,
            "stata_code": "educationdata using \\\"college ipeds admissions-requirements\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"admissions-requirements\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 27,
            "page_id": 2,
            "order": 4,
            "example_endpoint_url": "/api/v1/schools/ccd/enrollment/2012/grade-5/sex",
            "endpoint_url": "/api/v1/schools/ccd/enrollment/{year}/{grade}/sex/",
            "section": "Schools",
            "class_name": "CCD",
            "topic": "Enrollment",
            "sub_topic": "By grade and sex",
            "datasource_id": 2,
            "years_available": "1986&ndash;2022",
            "description": "This endpoint contains student membership data for each school by grade and sex. Only operational schools serving one or more grades are required to report membership and only these are included in this endpoint.",
            "var_list_id": 19,
            "stata_code": "educationdata using \\\"school ccd enrollment sex\\\", sub(year=2012 grade=5)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2012, grade = 5),\\nsubtopic = list(\\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 59,
            "page_id": 3,
            "order": 4,
            "example_endpoint_url": "/api/v1/school-districts/ccd/enrollment/2012/grade-5/sex/",
            "endpoint_url": "/api/v1/school-districts/ccd/enrollment/{year}/{grade}/sex/",
            "section": "School_districts",
            "class_name": "CCD",
            "topic": "Enrollment",
            "sub_topic": "By grade and sex",
            "datasource_id": 2,
            "years_available": "1986&ndash;2022",
            "description": "This endpoint contains student membership data for each school district by grade and sex.",
            "var_list_id": 37,
            "stata_code": "educationdata using \\\"district ccd enrollment sex\\\", sub(year=2012 grade=5)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2012, grade = 5),\\nsubtopic = list(\\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 6,
            "page_id": 1,
            "order": 5,
            "example_endpoint_url": "/api/v1/college-university/ipeds/academic-year-tuition/2017/",
            "endpoint_url": "/api/v1/college-university/ipeds/academic-year-tuition/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Student Charges for Academic-Year Programs",
            "sub_topic": "Tuition and fees",
            "datasource_id": 1,
            "years_available": "1986&ndash;2021",
            "description": "This endpoint contains data on tuition and fees for institutions that offer primarily academic programs.",
            "var_list_id": 6,
            "stata_code": "educationdata using \\\"college ipeds academic-year-tuition\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"academic-year-tuition\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 28,
            "page_id": 2,
            "order": 5,
            "example_endpoint_url": "/api/v1/schools/ccd/enrollment/2007/grade-6/race/sex/",
            "endpoint_url": "/api/v1/schools/ccd/enrollment/{year}/{grade}/race/sex/",
            "section": "Schools",
            "class_name": "CCD",
            "topic": "Enrollment",
            "sub_topic": "By grade, sex, and race",
            "datasource_id": 2,
            "years_available": "1986&ndash;2022",
            "description": "This endpoint contains student membership data for each school by grade, race, and sex. Only operational schools serving one or more grades are required to report membership and only these are included in this endpoint.",
            "var_list_id": 19,
            "stata_code": "educationdata using \\\"school ccd enrollment race sex\\\", sub(year=2007 grade=6)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2007, grade = 6),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 61,
            "page_id": 3,
            "order": 5,
            "example_endpoint_url": "/api/v1/school-districts/ccd/enrollment/2007/grade-6/race/sex/",
            "endpoint_url": "/api/v1/school-districts/ccd/enrollment/{year}/{grade}/race/sex/",
            "section": "School_districts",
            "class_name": "CCD",
            "topic": "Enrollment",
            "sub_topic": "By grade, sex, and race",
            "datasource_id": 2,
            "years_available": "1986&ndash;2022",
            "description": "This endpoint contains student membership data for each school district by grade, race, and sex.",
            "var_list_id": 37,
            "stata_code": "educationdata using \\\"district ccd enrollment race sex\\\", sub(year=2007 grade=6)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2007, grade = 6),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 5,
            "page_id": 1,
            "order": 6,
            "example_endpoint_url": "/api/v1/college-university/ipeds/academic-year-tuition-prof-program/2017/",
            "endpoint_url": "/api/v1/college-university/ipeds/academic-year-tuition-prof-program/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Student Charges for Academic-Year Programs",
            "sub_topic": "Tuition and fees by professional degree program",
            "datasource_id": 1,
            "years_available": "1986&ndash;2008, 2010&ndash;2021",
            "description": "This endpoint contains data on tuition and fees for professional degree programs at institutions that offer primarily academic programs.",
            "var_list_id": 5,
            "stata_code": "educationdata using \\\"college ipeds academic-year-tuition-prof-program\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"academic-year-tuition-prof-program\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 73,
            "page_id": 2,
            "order": 6,
            "example_endpoint_url": "/api/v1/schools/crdc/directory/2013/",
            "endpoint_url": "/api/v1/schools/crdc/directory/{year}/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": null,
            "sub_topic": "Directory",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains school-level geographic information, grades offered, and information on school type (including charter, magnet, and alternative schools).",
            "var_list_id": 47,
            "stata_code": "educationdata using \\\"school crdc directory\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"directory\\\",\\nfilters = list(year = 2011))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 29,
            "page_id": 3,
            "order": 6,
            "example_endpoint_url": "/api/v1/school-districts/ccd/finance/2013/",
            "endpoint_url": "/api/v1/school-districts/ccd/finance/{year}/",
            "section": "School_districts",
            "class_name": "CCD",
            "topic": null,
            "sub_topic": "Finance",
            "datasource_id": 2,
            "years_available": "1991, 1994&ndash;2018",
            "description": "This endpoint contains district level finance data including revenues from federal, state, and local governments and expenditures.",
            "var_list_id": 20,
            "stata_code": "educationdata using \\\"district ccd finance\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"ccd\\\",\\ntopic = \\\"finance\\\",\\nfilters = list(year = 2013))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 10,
            "page_id": 1,
            "order": 7,
            "example_endpoint_url": "/api/v1/college-university/ipeds/academic-year-room-board-other/2017/",
            "endpoint_url": "/api/v1/college-university/ipeds/academic-year-room-board-other/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Student Charges for Academic-Year Programs",
            "sub_topic": "Room, board, and other",
            "datasource_id": 1,
            "years_available": "1999&ndash;2021",
            "description": "This endpoint contains data on room, board, and other expenses for institutions that offer primarily academic programs.",
            "var_list_id": 62,
            "stata_code": "educationdata using \\\"college ipeds academic-year-room-board-other\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"academic-year-room-board-other\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 60,
            "page_id": 2,
            "order": 7,
            "example_endpoint_url": "/api/v1/schools/crdc/enrollment/2013/race/sex/",
            "endpoint_url": "/api/v1/schools/crdc/enrollment/{year}/race/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Enrollment",
            "sub_topic": "By race and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains student enrollment for each school by students' race and sex.",
            "var_list_id": 45,
            "stata_code": "educationdata using \\\"school crdc enrollment race sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 30,
            "page_id": 3,
            "order": 7,
            "example_endpoint_url": "/api/v1/school-districts/saipe/2008/",
            "endpoint_url": "/api/v1/school-districts/saipe/{year}/",
            "section": "School_districts",
            "class_name": "SAIPE",
            "topic": null,
            "sub_topic": "Poverty Estimates",
            "datasource_id": 5,
            "years_available": "1995, 1997, 1999&ndash;2021",
            "description": "This endpoint contains district level data on the size of the population, the size of the school age population, and the size of the school age population that is in poverty.",
            "var_list_id": 21,
            "stata_code": "educationdata using \\\"district saipe\\\", sub(year=2008)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"saipe\\\",\\nfilters = list(year = 2008))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 8,
            "page_id": 1,
            "order": 8,
            "example_endpoint_url": "/api/v1/college-university/ipeds/program-year-tuition-cip/2017/",
            "endpoint_url": "/api/v1/college-university/ipeds/program-year-tuition-cip/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Student Charges for Vocational Programs",
            "sub_topic": "Tuition and fees by CIP code",
            "datasource_id": 1,
            "years_available": "1987&ndash;2021",
            "description": "This endpoint contains data on tuition fees for the largest programs at institutions that offer primarily occupational programs.",
            "var_list_id": 8,
            "stata_code": "educationdata using \\\"college ipeds program-year-tuition-cip\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"program-year-tuition-cip\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 65,
            "page_id": 2,
            "order": 8,
            "example_endpoint_url": "/api/v1/schools/crdc/enrollment/2015/disability/sex/",
            "endpoint_url": "/api/v1/schools/crdc/enrollment/{year}/disability/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Enrollment",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains student enrollment for each school by students' disability status and sex.",
            "var_list_id": 45,
            "stata_code": "educationdata using \\\"school crdc enrollment disability sex\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2015),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 80,
            "page_id": 3,
            "order": 8,
            "example_endpoint_url": "/api/v1/school-districts/edfacts/assessments/2014/grade-8/",
            "endpoint_url": "/api/v1/school-districts/edfacts/assessments/{year}/{grade_edfacts}/",
            "section": "School_districts",
            "class_name": "EDFacts",
            "topic": "State Assessments",
            "sub_topic": "By grade",
            "datasource_id": 8,
            "years_available": "2009&ndash;2018, 2020",
            "description": "This endpoint contains district-level achievement results for state assessments in mathematics and reading or language arts, by grade. It includes the number of students who completed each assessment for whom a proficiency level was assigned and the proficiency share. The proficiency share is reported as a range, unless there are more than 300 students in the subgroup, with the magnitude of the range decreasing as the number of students reported increases. States can change their statewide assessments, academic standards, or thresholds for proficiency levels, leading to changes in the proficiency share from year to year. The proficiency shares for Virginia's 2016&ndash;17 grade 5&ndash;8 math assessments are too low. Users should instead refer to the Virginia Department of Education's Statistics and Reports <a href=\"http://www.doe.virginia.gov/statistics_reports/index.shtml\">website</a> for accurate data.",
            "var_list_id": 49,
            "stata_code": "educationdata using \\\"district edfacts assessments\\\", sub(year=2014 grade_edfacts=8)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"edfacts\\\",\\ntopic = \\\"assessments\\\",\\nfilters = list(year = 2014, grade_edfacts = 8))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 7,
            "page_id": 1,
            "order": 9,
            "example_endpoint_url": "/api/v1/college-university/ipeds/program-year-room-board-other/2017/",
            "endpoint_url": "/api/v1/college-university/ipeds/program-year-room-board-other/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Student Charges for Vocational Programs",
            "sub_topic": "Room, board, and other",
            "datasource_id": 1,
            "years_available": "1999&ndash;2021",
            "description": "This endpoint contains data on room, board, and other expenses for institutions that offer primarily occupational programs.",
            "var_list_id": 7,
            "stata_code": "educationdata using \\\"college ipeds program-year-room-board-other\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"program-year-room-board-other\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 67,
            "page_id": 2,
            "order": 9,
            "example_endpoint_url": "/api/v1/schools/crdc/enrollment/2011/lep/sex/",
            "endpoint_url": "/api/v1/schools/crdc/enrollment/{year}/lep/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Enrollment",
            "sub_topic": "By LEP and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains student enrollment for each school by students' Limited English Proficiency status and sex.",
            "var_list_id": 45,
            "stata_code": "educationdata using \\\"school crdc enrollment lep sex\\\", sub(year=2011)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"enrollment\\\",\\nfilters = list(year = 2011),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 81,
            "page_id": 3,
            "order": 9,
            "example_endpoint_url": "/api/v1/school-districts/edfacts/assessments/2013/grade-3/race/",
            "endpoint_url": "/api/v1/school-districts/edfacts/assessments/{year}/{grade_edfacts}/race/",
            "section": "School_districts",
            "class_name": "EDFacts",
            "topic": "State Assessments",
            "sub_topic": "By grade and race",
            "datasource_id": 8,
            "years_available": "2009&ndash;2018, 2020",
            "description": "This endpoint contains district-level achievement results for state assessments in mathematics and reading or language arts, by grade and race or ethnicity. It includes the number of students who completed each assessment for whom a proficiency level was assigned and the proficiency share. The proficiency share is reported as a range, unless there are more than 300 students in the subgroup, with the magnitude of the range decreasing as the number of students reported increases. States can change their statewide assessments, academic standards, or thresholds for proficiency levels, leading to changes in the proficiency share from year to year. Users are cautioned that the proficiency shares for Virginia's 2016&ndash;17 grade 5&ndash;8 math assessments are too low. The proficiency shares for Virginia's 2016&ndash;17 grade 5&ndash;8 math assessments are too low. Users should instead refer to the Virginia Department of Education's Statistics and Reports <a href=\"http://www.doe.virginia.gov/statistics_reports/index.shtml\">website</a> for accurate data.",
            "var_list_id": 49,
            "stata_code": "educationdata using \\\"district edfacts assessments race\\\", sub(year=2013 grade_edfacts=3)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"edfacts\\\",\\ntopic = \\\"assessments\\\",\\nfilters = list(year = 2013, grade_edfacts = 3),\\nsubtopic = list(\\\"race\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 9,
            "page_id": 1,
            "order": 10,
            "example_endpoint_url": "/api/v1/college-university/ipeds/enrollment-full-time-equivalent/2004/2/",
            "endpoint_url": "/api/v1/college-university/ipeds/enrollment-full-time-equivalent/{year}/{level_of_study}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Enrollment",
            "sub_topic": "Full-time equivalent",
            "datasource_id": 1,
            "years_available": "1997&ndash;2021",
            "description": "This endpoint contains data on instructional activity measured in total credit and/or contact hours delivered by institutions during a 12-month period.  The credit hour and contact hour activity data are used to derive 12-month full-time equivalent (FTE) enrollments for both undergraduate and graduate levels. The graduate level does not include credit hours for doctoral professional practice students.   Institutions can choose to accept the derived FTE or report their own FTE.  Both reported and estimated/derived FTE are available in this data table for 2003 and later. In addition, the reported FTE of doctoral professional practice students are also included. These data are only available at the undergraduate, graduate, and first professional level. \n",
            "var_list_id": 9,
            "stata_code": "educationdata using \\\"college ipeds enrollment-full-time-equivalent\\\", sub(year=2004 level_of_study=2)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"enrollment-full-time-equivalent\\\",\\nfilters = list(year = 2004, level_of_study = \\\"graduate\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 82,
            "page_id": 3,
            "order": 10,
            "example_endpoint_url": "/api/v1/school-districts/edfacts/assessments/2012/grade-5/sex/",
            "endpoint_url": "/api/v1/school-districts/edfacts/assessments/{year}/{grade_edfacts}/sex/",
            "section": "School_districts",
            "class_name": "EDFacts",
            "topic": "State Assessments",
            "sub_topic": "By grade and sex",
            "datasource_id": 8,
            "years_available": "2009&ndash;2018, 2020",
            "description": "This endpoint contains district-level achievement results for state assessments in mathematics and reading or language arts, by grade and sex. It includes the number of students who completed each assessment for whom a proficiency level was assigned and the proficiency share. The proficiency share is reported as a range, unless there are more than 300 students in the subgroup, with the magnitude of the range decreasing as the number of students reported increases. States can change their statewide assessments, academic standards, or thresholds for proficiency levels, leading to changes in the proficiency share from year to year. The proficiency shares for Virginia's 2016&ndash;17 grade 5&ndash;8 math assessments are too low. Users should instead refer to the Virginia Department of Education's Statistics and Reports <a href=\"http://www.doe.virginia.gov/statistics_reports/index.shtml\">website</a> for accurate data.",
            "var_list_id": 49,
            "stata_code": "educationdata using \\\"district edfacts assessments sex\\\", sub(year=2012 grade_edfacts=5)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"edfacts\\\",\\ntopic = \\\"assessments\\\",\\nfilters = list(year = 2012, grade_edfacts = 5),\\nsubtopic = list(\\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 83,
            "page_id": 3,
            "order": 11,
            "example_endpoint_url": "/api/v1/school-districts/edfacts/assessments/2016/grade-9/special-populations/",
            "endpoint_url": "/api/v1/school-districts/edfacts/assessments/{year}/{grade_edfacts}/special-populations/",
            "section": "School_districts",
            "class_name": "EDFacts",
            "topic": "State Assessments",
            "sub_topic": "By grade and special populations",
            "datasource_id": 8,
            "years_available": "2009&ndash;2018, 2020",
            "description": "This endpoint contains district-level achievement results for state assessments in mathematics and reading or language arts, by grade and special population subgroups. It includes the number of students who completed each assessment for whom a proficiency level was assigned and the proficiency share. The proficiency share is reported as a range, unless there are more than 300 students in the subgroup, with the magnitude of the range decreasing as the number of students reported increases. Special population subgroups include children with one or more disabilities, economically disadvantaged students, students who are homeless, migrant students, and students with limited English proficiency. Beginning in 2017, special population subgroups also include students who are in foster care and students who are military connected. States can change their statewide assessments, academic standards, or thresholds for proficiency levels, leading to changes in the proficiency share from year to year. The proficiency shares for Virginia's 2016&ndash;17 grade 5&ndash;8 math assessments are too low. Users should instead refer to the Virginia Department of Education's Statistics and Reports <a href=\"http://www.doe.virginia.gov/statistics_reports/index.shtml\">website</a> for accurate data.",
            "var_list_id": 49,
            "stata_code": "educationdata using \\\"district edfacts assessments special-populations\\\", sub(year=2016 grade_edfacts=9)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"edfacts\\\",\\ntopic = \\\"assessments\\\",\\nfilters = list(year = 2016, grade_edfacts = 9),\\nsubtopic = list(\\\"special-populations\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 101,
            "page_id": 3,
            "order": 12,
            "example_endpoint_url": "/api/v1/school-districts/edfacts/grad-rates/2014/",
            "endpoint_url": "/api/v1/school-districts/edfacts/grad-rates/{year}/",
            "section": "School_districts",
            "class_name": "EDFacts",
            "topic": null,
            "sub_topic": "Adjusted Cohort Graduation Rates",
            "datasource_id": 8,
            "years_available": "2010&ndash;2019",
            "description": "This endpoint contains district-level adjusted cohort graduation rates.  The graduation rate is reported as a range, with the magnitude of the range decreasing as the number of students reported increases. Graduation rates are provided by race and special populations.",
            "var_list_id": 69,
            "stata_code": "educationdata using \\\"district edfacts grad-rates\\\", sub(year=2014)",
            "r_code": "get_education_data(level = \\\"school-districts\\\",\\nsource = \\\"edfacts\\\",\\ntopic = \\\"grad-rates\\\",\\nfilters = list(year = 2014))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 119,
            "page_id": 2,
            "order": 12,
            "example_endpoint_url": "/api/v1/schools/crdc/discipline-instances/2017/",
            "endpoint_url": "/api/v1/schools/crdc/discipline-instances/{year}/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": null,
            "sub_topic": "Discipline incidents",
            "datasource_id": 3,
            "years_available": "2015, 2017",
            "description": "This endpoint contains the number of discipline instances in schools.",
            "var_list_id": 82,
            "stata_code": "educationdata using \\\"school crdc discipline-instances\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"discipline-instances\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 13,
            "page_id": 1,
            "order": 13,
            "example_endpoint_url": "/api/v1/college-university/ipeds/fall-enrollment/2015/undergraduate/race/sex/",
            "endpoint_url": "/api/v1/college-university/ipeds/fall-enrollment/{year}/{level_of_study}/race/sex/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Enrollment",
            "sub_topic": "Fall enrollment by level of study, full-time/part-time status, race, and sex",
            "datasource_id": 1,
            "years_available": "1986&ndash;2020",
            "description": "This endpoint contains the number of students enrolled in the fall by race, sex, full-time/part-time status, and level of study. For undergraduates, this is further broken down by degree-seeking/non&ndash;degree-seeking, and degree-seeking is broken down by class level. Institutions with traditional academic year calendar systems (semester, quarter, trimester, or 4-1-4) report their enrollment as of October 15 or the official fall reporting date of the institution. Institutions with calendar systems that differ by program or allow continuous enrollment report students who are enrolled at any time between August 1 and October 31. Available levels of study are undergraduate, graduate, first-professional (through 2008 only), and postbaccalaureate (through 1998 only).",
            "var_list_id": 10,
            "stata_code": "educationdata using \\\"college ipeds fall-enrollment race sex\\\", sub(year=2015 level_of_study=undergraduate)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"fall-enrollment\\\",\\nfilters = list(year = 2015, level_of_study = \\\"undergraduate\\\"),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 69,
            "page_id": 2,
            "order": 13,
            "example_endpoint_url": "/api/v1/schools/crdc/discipline/2013/disability/sex/",
            "endpoint_url": "/api/v1/schools/crdc/discipline/{year}/disability/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Discipline",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains student discipline information for each school, including suspensions, expulsions, arrests, referrals,  and corporal punishment by students' race and sex.",
            "var_list_id": 46,
            "stata_code": "educationdata using \\\"school crdc discipline disability sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"discipline\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 71,
            "page_id": 2,
            "order": 14,
            "example_endpoint_url": "/api/v1/schools/crdc/discipline/2015/disability/race/sex/",
            "endpoint_url": "/api/v1/schools/crdc/discipline/{year}/disability/race/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Discipline",
            "sub_topic": "By disability, race, and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains student discipline information for each school, including suspensions, expulsions, arrests, referrals, and corporal punishment by students' disability status and sex.",
            "var_list_id": 46,
            "stata_code": "educationdata using \\\"school crdc discipline disability race sex\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"discipline\\\",\\nfilters = list(year = 2015),\\nsubtopic = list(\\\"disability\\\",  \\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 15,
            "page_id": 1,
            "order": 15,
            "example_endpoint_url": "/api/v1/college-university/ipeds/fall-enrollment/2008/undergraduate/age/sex/",
            "endpoint_url": "/api/v1/college-university/ipeds/fall-enrollment/{year}/{level_of_study}/age/sex/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Enrollment",
            "sub_topic": "Fall enrollment by level of study, full-time/part-time status, age categories, and sex",
            "datasource_id": 1,
            "years_available": "1991, 1993, 1995, 1997, and 1999&ndash;2020",
            "description": "This endpoint contains the number of students enrolled in the fall by age categories, sex, full-time/part-time status, and level of study.\u00c2\u00a0Institutions with traditional academic year calendar systems (semester, quarter, trimester, or\u00c2\u00a04-1-4) report their enrollment as of October 15 or the official fall reporting date of the institution. Institutions with calendar systems that differ by program or allow continuous enrollment report students who are enrolled at any time between August 1 and October 31. Submission of enrollment by age categories is optional in even-numbered years. Available levels of study are undergraduate, graduate, and first-professional (through 2008 only); in 2000, only undergraduate data are available.",
            "var_list_id": 22,
            "stata_code": "educationdata using \\\"college ipeds fall-enrollment age sex\\\", sub(year=2008 level_of_study=undergraduate)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"fall-enrollment\\\",\\nfilters = list(year = 2008, level_of_study = \\\"undergraduate\\\"),\\nsubtopic = list(\\\"age\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 72,
            "page_id": 2,
            "order": 15,
            "example_endpoint_url": "/api/v1/schools/crdc/discipline/2011/disability/lep/sex/",
            "endpoint_url": "/api/v1/schools/crdc/discipline/{year}/disability/lep/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Discipline",
            "sub_topic": "By disability, LEP, and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains student discipline information for each school, including suspensions, expulsions, arrests, referrals, and corporal punishment by students' limited English proficiency status and sex.",
            "var_list_id": 46,
            "stata_code": "educationdata using \\\"school crdc discipline disability LEP sex\\\", sub(year=2011)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"discipline\\\",\\nfilters = list(year = 2011),\\nsubtopic = list(\\\"disability\\\", \\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 41,
            "page_id": 2,
            "order": 16,
            "example_endpoint_url": "/api/v1/schools/crdc/harassment-or-bullying/2015/allegations/",
            "endpoint_url": "/api/v1/schools/crdc/harassment-or-bullying/{year}/allegations/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Harassment or Bullying",
            "sub_topic": "Allegations",
            "datasource_id": 3,
            "years_available": "2013, 2015, 2017",
            "description": "This endpoint contains the number of allegations of harassment or bullying on the basis of sex; on the basis of race, color, or national origin; or on the basis of disability. This only includes students in grades K-12 and comparable ungraded levels.",
            "var_list_id": 29,
            "stata_code": "educationdata using \\\"school crdc harassment-or-bullying allegations\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"harassment-or-bullying\\\",\\nfilters = list(year = 2015),\\nsubtopic = list(\\\"allegations\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 84,
            "page_id": 1,
            "order": 16,
            "example_endpoint_url": "/api/v1/college-university/ipeds/fall-enrollment/2017/residence/",
            "endpoint_url": "/api/v1/college-university/ipeds/fall-enrollment/{year}/residence/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Enrollment",
            "sub_topic": "Freshman fall enrollment by state of residence",
            "datasource_id": 1,
            "years_available": "1986, 1988, 1992, 1994, 1996, 1998, 2000&ndash;2020",
            "description": "This endpoint contains the number of first-time freshmen by state of residence, along with data on the number who graduated from high school the previous year. Institutions with traditional academic year calendar systems (i.e., semester, quarter, trimester, or 4-1-4) report their enrollment as of October 15 or the institution's official fall reporting date. Institutions with calendar systems that differ by program or allow continuous enrollment report students that are enrolled at any time between August 1 and October 31. Submission of enrollment of first-time undergraduate students by residency is mandatory in even-numbered years and optional in odd-numbered years.",
            "var_list_id": 50,
            "stata_code": "educationdata using \\\"college ipeds fall-enrollment residence\\\", sub(year=2009)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"fall-enrollment\\\",\\nfilters = list(year = 2009),\\nsubtopic = list(\\\"residence\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 18,
            "page_id": 1,
            "order": 17,
            "example_endpoint_url": "/api/v1/college-university/ipeds/enrollment-headcount/2011/1/",
            "endpoint_url": "/api/v1/college-university/ipeds/enrollment-headcount/{year}/{level_of_study}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Enrollment",
            "sub_topic": "Headcount",
            "datasource_id": 1,
            "years_available": "1996&ndash;2021",
            "description": "This endpoint contains the unduplicated head count of students enrolled over a 12-month period for both undergraduate and graduate levels. These enrollment data are particularly valuable for institutions that use non-traditional calendar systems and offer short-term programs. Because this enrollment measure encompasses an entire year, it provides a more complete picture of the number of students these schools serve. Counts are available by level of study, sex, and race/ethnicity. \n",
            "var_list_id": 25,
            "stata_code": "educationdata using \\\"college ipeds enrollment-headcount\\\", sub(year=2011 level_of_study=1)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"enrollment-headcount\\\",\\nfilters = list(year = 2011, level_of_study = \\\"undergraduate\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 42,
            "page_id": 2,
            "order": 17,
            "example_endpoint_url": "/api/v1/schools/crdc/harassment-or-bullying/2011/race/sex/",
            "endpoint_url": "/api/v1/schools/crdc/harassment-or-bullying/{year}/race/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Harassment or Bullying",
            "sub_topic": "Students by race and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students who reported being harassed or bullied and the number of students who were disciplined for harassment or bullying, by students' race and sex. These reports and disciplines could be on the basis of sex; on the basis of race, color, or national origin; or on the basis of disability. This includes only students in grades K&ndash;12 and comparable ungraded levels.",
            "var_list_id": 30,
            "stata_code": "educationdata using \\\"school crdc harassment-or-bullying race sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"harassment-or-bullying\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 16,
            "page_id": 1,
            "order": 18,
            "example_endpoint_url": "/api/v1/college-university/ipeds/fall-retention/2003/",
            "endpoint_url": "/api/v1/college-university/ipeds/fall-retention/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": null,
            "sub_topic": "Fall Retention",
            "datasource_id": 1,
            "years_available": "2003&ndash;2020",
            "description": "The first-year retention rate data measures the percentage of first-year students who persisted in or completed their educational program a year later. This is provided for full-time and part-time students.",
            "var_list_id": 11,
            "stata_code": "educationdata using \\\"college ipeds fall-retention\\\", sub(year=2003)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"fall-retention\\\",\\nfilters = list(year = 2003))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 43,
            "page_id": 2,
            "order": 18,
            "example_endpoint_url": "/api/v1/schools/crdc/harassment-or-bullying/2015/disability/sex/",
            "endpoint_url": "/api/v1/schools/crdc/harassment-or-bullying/{year}/disability/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Harassment or Bullying",
            "sub_topic": "Students by disability and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students who reported being harassed or bullied and the number of students who were disciplined for harassment or bullying, by students' disability status and sex. These reports and disciplines could be on the basis of sex, on the basis of race, color, or national origin, or on the basis of disability. This only includes students in grades K-12 and comparable ungraded levels.",
            "var_list_id": 30,
            "stata_code": "educationdata using \\\"school crdc harassment-or-bullying disability sex\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"harassment-or-bullying\\\",\\nfilters = list(year = 2015),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 44,
            "page_id": 2,
            "order": 19,
            "example_endpoint_url": "/api/v1/schools/crdc/harassment-or-bullying/2015/lep/sex",
            "endpoint_url": "/api/v1/schools/crdc/harassment-or-bullying/{year}/lep/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Harassment or Bullying",
            "sub_topic": "Students by LEP and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students who reported being harassed or bullied and the number of students who were disciplined for harassment or bullying, by students' limited English proficiency status and sex. These reports and disciplines could be on the basis of sex, on the basis of race, color, or national origin, or on the basis of disability. This only includes students in grades K-12 and comparable ungraded levels.",
            "var_list_id": 30,
            "stata_code": "educationdata using \\\"school crdc harassment-or-bullying LEP sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"harassment-or-bullying\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 91,
            "page_id": 1,
            "order": 19,
            "example_endpoint_url": "/api/v1/college-university/ipeds/finance/2016/",
            "endpoint_url": "/api/v1/college-university/ipeds/finance/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": null,
            "sub_topic": "Finance",
            "datasource_id": 1,
            "years_available": "1979, 1983&ndash;2017",
            "description": "This endpoint contains institutional finance data, including institutional revenue by source, scholarships, expenditures by functional and natural classifications, endowments, assets and liabilities, and pensions. A user guide to these data can be found <a href=\"https://www.urban.org/research/publication/ipeds-finance-user-guide\">here</a>.",
            "var_list_id": 57,
            "stata_code": "educationdata using \\\"college ipeds finance\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"finance\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 17,
            "page_id": 1,
            "order": 20,
            "example_endpoint_url": "/api/v1/college-university/ipeds/student-faculty-ratio/2014/",
            "endpoint_url": "/api/v1/college-university/ipeds/student-faculty-ratio/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": null,
            "sub_topic": "Student-Faculty Ratio",
            "datasource_id": 1,
            "years_available": "2009&ndash;2020",
            "description": "Student-to-faculty ratio is defined as total FTE students not in graduate or professional programs divided by total FTE instructional staff not teaching in graduate or professional programs. All data on this file is applicable only to institutions with undergraduate students.",
            "var_list_id": 23,
            "stata_code": "educationdata using \\\"college ipeds student-faculty-ratio\\\", sub(year=2014)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"student-faculty-ratio\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 37,
            "page_id": 2,
            "order": 20,
            "example_endpoint_url": "/api/v1/schools/crdc/chronic-absenteeism/2013/race/sex/",
            "endpoint_url": "/api/v1/schools/crdc/chronic-absenteeism/{year}/race/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Chronic Absenteeism",
            "sub_topic": "By race and sex",
            "datasource_id": 3,
            "years_available": "2013, 2015",
            "description": "This endpoint contains the number of students who were chronically absent, by race and sex. Chronic absenteeism is defined as being absent 15 or more school days during the school year. A student is absent if he or she is not physically on school grounds and is not participating in instruction or instruction-related activities at an approved off-grounds location for the school day. Chronically absent students include students who are absent for any reason (e.g., illness, suspension, the need to care for a family member), regardless of whether absences are excused or unexcused.",
            "var_list_id": 26,
            "stata_code": "educationdata using \\\"school crdc chronic-absenteeism race sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"chronic-absenteeism\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 32,
            "page_id": 1,
            "order": 21,
            "example_endpoint_url": "/api/v1/college-university/ipeds/sfa-grants-and-net-price/2017/",
            "endpoint_url": "/api/v1/college-university/ipeds/sfa-grants-and-net-price/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Student Financial Aid",
            "sub_topic": "Grants and net price",
            "datasource_id": 1,
            "years_available": "2008&ndash;2017",
            "description": "This endpoint contains data on net price, grant amounts, and total students receiving grant aid for first-time, full-time degree-seeking students receiving Title IV aid or any grant aid.",
            "var_list_id": 63,
            "stata_code": "educationdata using \\\"college ipeds sfa-grants-and-net-price\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"sfa-grants-and-net-price\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 38,
            "page_id": 2,
            "order": 21,
            "example_endpoint_url": "/api/v1/schools/crdc/chronic-absenteeism/2015/disability/sex/",
            "endpoint_url": "/api/v1/schools/crdc/chronic-absenteeism/{year}/disability/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Chronic Absenteeism",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2013, 2015",
            "description": "This endpoint contains the number of students who were chronically absent, by disability status and sex. Chronic absenteeism is defined as being absent 15 or more school days during the school year. A student is absent if he or she is not physically on school grounds and is not participating in instruction or instruction-related activities at an approved off-grounds location for the school day. Chronically absent students include students who are absent for any reason (e.g., illness, suspension, the need to care for a family member), regardless of whether absences are excused or unexcused.",
            "var_list_id": 26,
            "stata_code": "educationdata using \\\"school crdc chronic-absenteeism disability sex\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"chronic-absenteeism\\\",\\nfilters = list(year = 2015),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 96,
            "page_id": 1,
            "order": 22,
            "example_endpoint_url": "/api/v1/college-university/ipeds/sfa-by-living-arrangement/2017/",
            "endpoint_url": "/api/v1/college-university/ipeds/sfa-by-living-arrangement/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Student Financial Aid",
            "sub_topic": "By living arrangement",
            "datasource_id": 1,
            "years_available": "2008&ndash;2017",
            "description": "This endpoint contains data on total first-time, full-time degree-seeking students receiving Title IV aid or any grant aid, by living arrangement.",
            "var_list_id": 64,
            "stata_code": "educationdata using \\\"college ipeds sfa-by-living-arrangement\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"sfa-by-living-arrangement\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 39,
            "page_id": 2,
            "order": 22,
            "example_endpoint_url": "/api/v1/schools/crdc/chronic-absenteeism/2013/lep/sex/",
            "endpoint_url": "/api/v1/schools/crdc/chronic-absenteeism/{year}/lep/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Chronic Absenteeism",
            "sub_topic": "By LEP and sex",
            "datasource_id": 3,
            "years_available": "2013, 2015",
            "description": "This endpoint contains the number of students who were chronically absent, by limited English proficiency status and sex. Chronic absenteeism is defined as being absent 15 or more school days during the school year. A student is absent if he or she is not physically on school grounds and is not participating in instruction or instruction-related activities at an approved off-grounds location for the school day. Chronically absent students include students who are absent for any reason (e.g., illness, suspension, the need to care for a family member), regardless of whether absences are excused or unexcused.",
            "var_list_id": 26,
            "stata_code": "educationdata using \\\"school crdc chronic-absenteeism lep sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"chronic-absenteeism\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 97,
            "page_id": 1,
            "order": 23,
            "example_endpoint_url": "/api/v1/college-university/ipeds/sfa-by-tuition-type/2017/",
            "endpoint_url": "/api/v1/college-university/ipeds/sfa-by-tuition-type/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Student Financial Aid",
            "sub_topic": "By tuition type",
            "datasource_id": 1,
            "years_available": "1999&ndash;2017",
            "description": "This endpoint contains data on total first-time, full-time degree-seeking students paying in-district, in-state, or out-of-state tuition.",
            "var_list_id": 65,
            "stata_code": "educationdata using \\\"college ipeds sfa-by-tuition-type\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"sfa-by-tuition-type\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 34,
            "page_id": 2,
            "order": 23,
            "example_endpoint_url": "/api/v1/schools/crdc/restraint-and-seclusion/2015/instances/",
            "endpoint_url": "/api/v1/schools/crdc/restraint-and-seclusion/{year}/instances/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Restraint and Seclusion",
            "sub_topic": "Instances",
            "datasource_id": 3,
            "years_available": "2013, 2015, 2017",
            "description": "This endpoint contains the number of instances of restraint or seclusion, by  student's disability status. This includes only students in grades K&ndash;12 and comparable ungraded levels.",
            "var_list_id": 27,
            "stata_code": "educationdata using \\\"school crdc restraint-and-seclusion instances\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"restraint-and-seclusion\\\",\\nfilters = list(year = 2015),\\nsubtopic = list(\\\"instances\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 98,
            "page_id": 1,
            "order": 24,
            "example_endpoint_url": "/api/v1/college-university/ipeds/sfa-all-undergraduates/2017/",
            "endpoint_url": "/api/v1/college-university/ipeds/sfa-all-undergraduates/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Student Financial Aid",
            "sub_topic": "All undergraduates",
            "datasource_id": 1,
            "years_available": "2007&ndash;2017",
            "description": "This endpoint contains data on total undergraduate students receiving different types of aid.",
            "var_list_id": 66,
            "stata_code": "educationdata using \\\"college ipeds sfa-all-undergraduates\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"sfa-all-undergraduates\\\",\\nfilters = list(year = 2017\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 35,
            "page_id": 2,
            "order": 24,
            "example_endpoint_url": "/api/v1/schools/crdc/restraint-and-seclusion/2011/disability/sex/",
            "endpoint_url": "/api/v1/schools/crdc/restraint-and-seclusion/{year}/disability/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Restraint and Seclusion",
            "sub_topic": "Students by disability and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students who were subjected to restraint or seclusion, by disability status and sex. This includes only students in grades K&ndash;12 and comparable ungraded levels.",
            "var_list_id": 28,
            "stata_code": "educationdata using \\\"school crdc restraint-and-seclusion disability sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"restraint-and-seclusion\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 99,
            "page_id": 1,
            "order": 25,
            "example_endpoint_url": "/api/v1/college-university/ipeds/sfa-ftft/2017/",
            "endpoint_url": "/api/v1/college-university/ipeds/sfa-ftft/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Student Financial Aid",
            "sub_topic": "First-time, full-time undergraduates",
            "datasource_id": 1,
            "years_available": "1999&ndash;2017",
            "description": "This endpoint contains data on total first-time, full-time degree-seeking students receiving different types of aid.",
            "var_list_id": 67,
            "stata_code": "educationdata using \\\"college ipeds sfa-ftft\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"sfa-ftft\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 36,
            "page_id": 2,
            "order": 25,
            "example_endpoint_url": "/api/v1/schools/crdc/restraint-and-seclusion/2013/disability/race/sex/",
            "endpoint_url": "/api/v1/schools/crdc/restraint-and-seclusion/{year}/disability/race/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Restraint and Seclusion",
            "sub_topic": "Students by disability, race, and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students who were subjected to restraint or seclusion, by disability status, race, and sex. This includes only students in grades K&ndash;12 and comparable ungraded levels.",
            "var_list_id": 28,
            "stata_code": "educationdata using \\\"school crdc restraint-and-seclusion disability race sex\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"restraint-and-seclusion\\\",\\nfilters = list(year = 2015),\\nsubtopic = list(\\\"disability\\\",\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 20,
            "page_id": 1,
            "order": 26,
            "example_endpoint_url": "/api/v1/college-university/ipeds/grad-rates/2002/",
            "endpoint_url": "/api/v1/college-university/ipeds/grad-rates/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Graduation Rates",
            "sub_topic": "150 percent",
            "datasource_id": 1,
            "years_available": "1996&ndash;2017",
            "description": "This endpoint contains the graduation rate status as of August 31, at the end of the academic year, for the cohort of full-time, first-time degree- or certificate-seeking undergraduates, by race and sex. Data for four-year institutions include the number of bachelor's degree&ndash;seeking students who enrolled six academic years earlier, the number of bachelor's degree&ndash;seeking students who completed any degree or certificate within 150 percent of normal time, the number who completed a bachelor's degree within 100, 125 or 150 percent on normal time, and the number of bachelor's degree&ndash;seeking students who transferred out. Data for students seeking a degree or certificate other than a bachelor's degree are also included for four-year institutions. Data for two-year institutions include the number of full-time, first-time students who enrolled three academic years earlier, the number of students who completed any degree or certificate within 100 or 150 percent of normal time and the number of students who transferred out. The number of students who completed a degree or certificate within 100 percent of normal time is not available by race and sex.",
            "var_list_id": 14,
            "stata_code": "educationdata using \\\"college ipeds grad-rates\\\", sub(year=2002)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"grad-rates\\\",\\nfilters = list(year = 2002))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 40,
            "page_id": 2,
            "order": 26,
            "example_endpoint_url": "/api/v1/schools/crdc/restraint-and-seclusion/2015/disability/lep/sex/",
            "endpoint_url": "/api/v1/schools/crdc/restraint-and-seclusion/{year}/disability/lep/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Restraint and Seclusion",
            "sub_topic": "Students by disability, LEP, and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students who were subjected to restraint or seclusion, by disability status, limited English proficiency status, and sex. This includes only students in grades K&ndash;12 and comparable ungraded levels.",
            "var_list_id": 28,
            "stata_code": "educationdata using \\\"school crdc restraint-and-seclusion disability lep sex\\\", sub(year=2011)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"restraint-and-seclusion\\\",\\nfilters = list(year = 2011),\\nsubtopic = list(\\\"disability\\\",\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 19,
            "page_id": 1,
            "order": 27,
            "example_endpoint_url": "/api/v1/college-university/ipeds/grad-rates-200pct/2007/",
            "endpoint_url": "/api/v1/college-university/ipeds/grad-rates-200pct/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Graduation Rates",
            "sub_topic": "200 percent",
            "datasource_id": 1,
            "years_available": "2007&ndash;2017",
            "description": "This endpoint contains the graduation rate status as of August 31, at the end of the academic year, for the cohort of full-time, first-time degree- or certificate-seeking undergraduates. Data for four-year institutions include the number of bachelor's degree&ndash;seeking students who enrolled eight academic years earlier, the number of bachelor's degree&ndash;seeking students who completed a bachelor's degree within 100, 150  or 200 percent on normal time.  Data for less than four-year institutions include the number of full-time, first-time students who enrolled four academic years earlier, the number of students who completed any degree or certificate within 100, 150, or 200 percent of normal time.",
            "var_list_id": 13,
            "stata_code": "educationdata using \\\"college ipeds grad-rates-200pct\\\", sub(year=2007)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"grad-rates-200pct\\\",\\nfilters = list(year = 2007))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 46,
            "page_id": 2,
            "order": 27,
            "example_endpoint_url": "/api/v1/schools/crdc/ap-ib-enrollment/2013/race/sex/",
            "endpoint_url": "/api/v1/schools/crdc/ap-ib-enrollment/{year}/race/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "AP, IB, and GT Enrollment",
            "sub_topic": "By race and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students enrolled in Advanced Placement (AP) courses, the International Baccalaureate (IB) Diploma Programme, and gifted and talented (GT) programs, by race and sex.",
            "var_list_id": 32,
            "stata_code": "educationdata using \\\"school crdc ap-ib-enrollment race sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"ap-ib-enrollment\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 21,
            "page_id": 1,
            "order": 28,
            "example_endpoint_url": "/api/v1/college-university/ipeds/grad-rates-pell/2015/",
            "endpoint_url": "/api/v1/college-university/ipeds/grad-rates-pell/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Graduation Rates",
            "sub_topic": "By type of federal aid",
            "datasource_id": 1,
            "years_available": "2015&ndash;2017",
            "description": "This endpoint contains the graduation rate status as of August 31, at the end of the academic year, for three subcohorts of full-time, first-time degree- or certificate-seeking undergraduates. The three subcohorts are students who received a Pell grant, students who received a subsidized Stafford loan and did not receive a Pell grant, and students who did not receive either a Pell grant or Stafford loan. In four-year institutions each of the subcohorts will include the number of bachelor's degree&ndash;seeking students who enrolled six academic years earlier, the number of bachelor's degree&ndash;seeking students who completed any degree or certificate within 150 percent of normal time, the number who completed a bachelor's degree within 150 percent on normal time.  Data for students seeking a degree or certificate other than a bachelor's degree are also included for four-year institutions. Data for two-year and less-than two-year institutions include the number of full-time, first-time students who enrolled three academic years earlier and the number of students who completed any degree or certificate 150 percent of normal time.\n",
            "var_list_id": 15,
            "stata_code": "educationdata using \\\"college ipeds grad-rates-pell\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"grad-rates-pell\\\",\\nfilters = list(year = 2015))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 47,
            "page_id": 2,
            "order": 28,
            "example_endpoint_url": "/api/v1/schools/crdc/ap-ib-enrollment/2015/disability/sex/",
            "endpoint_url": "/api/v1/schools/crdc/ap-ib-enrollment/{year}/disability/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "AP, IB, and GT Enrollment",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students enrolled in Advanced Placement (AP) courses, the International Baccalaureate (IB) Diploma Programme, and gifted and talented (GT) programs, by disability and sex.",
            "var_list_id": 32,
            "stata_code": "educationdata using \\\"school crdc ap-ib-enrollment disability sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"ap-ib-enrollment\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 22,
            "page_id": 1,
            "order": 29,
            "example_endpoint_url": "/api/v1/college-university/ipeds/outcome-measures/2015/",
            "endpoint_url": "/api/v1/college-university/ipeds/outcome-measures/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": null,
            "sub_topic": "Outcome Measures",
            "datasource_id": 1,
            "years_available": "2015&ndash;2021",
            "description": "This endpoint contains award and enrollment data from degree-granting institutions on undergraduate cohorts that entered an institution eight academic years ago. The two years of data currently available have slightly different definitions for cohorts and information available. In 2015, there is information on four cohorts collected at two points in time: six academic years and eight academic years after entry.  The four cohorts of degree- or certificate-seeking undergraduates are full-time, first-time entering; part-time, first-time entering; full-time, non-first-time entering; and part-time, non-first-time entering. In 2016, there is information on eight cohorts collected at three points in time: four academic years, six academic years, and eight academic years after entry. The eight cohorts are the four cohorts described for 2015, but for each, they further disaggregate by Pell recipients and non-Pell recipients. Additionally, in 2016, they collect more detailed information about the types of awards completed, such as a certificate, Associate's degree, or Bachelor's degree. Finally, the cohort definitions between the two years change. In 2015, the completion rate at 6 and 8 years after entry uses the adjusted cohort from the corresponding year after entry as the denominator, whereas in 2016, one adjusted cohort is used as the denominator in all rates, regardless of years after entry.",
            "var_list_id": 16,
            "stata_code": "educationdata using \\\"college ipeds outcome-measures\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"outcome-measures\\\",\\nfilters = list(year = 2015))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 48,
            "page_id": 2,
            "order": 29,
            "example_endpoint_url": "/api/v1/schools/crdc/ap-ib-enrollment/2015/lep/sex/",
            "endpoint_url": "/api/v1/schools/crdc/ap-ib-enrollment/{year}/lep/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "AP, IB, and GT Enrollment",
            "sub_topic": "By LEP and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students enrolled in Advanced Placement (AP) courses, the International Baccalaureate (IB) Diploma Programme, and gifted and talented (GT) programs, by limited English proficiency status and sex.",
            "var_list_id": 32,
            "stata_code": "educationdata using \\\"school crdc ap-ib-enrollment lep sex\\\", sub(year=2011)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"ap-ib-enrollment\\\",\\nfilters = list(year = 2011),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 31,
            "page_id": 1,
            "order": 30,
            "example_endpoint_url": "/api/v1/college-university/ipeds/completers/2012/",
            "endpoint_url": "/api/v1/college-university/ipeds/completers/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": null,
            "sub_topic": "Completers",
            "datasource_id": 1,
            "years_available": "2011&ndash;2022",
            "description": "This endpoint contains the number of students who completed any degree or certificate by race and ethnicity and gender.",
            "var_list_id": 24,
            "stata_code": "educationdata using \\\"college ipeds completers\\\", sub(year=2012)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"completers\\\",\\nfilters = list(year = 2012))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 53,
            "page_id": 2,
            "order": 30,
            "example_endpoint_url": "/api/v1/schools/crdc/ap-exams/2013/race/sex/",
            "endpoint_url": "/api/v1/schools/crdc/ap-exams/{year}/race/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "AP Exams",
            "sub_topic": "By race and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students taking  AP exams, and the number of students passing AP exams, by students' race and sex.",
            "var_list_id": 35,
            "stata_code": "educationdata using \\\"school crdc ap-exams race sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"ap-exams\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 23,
            "page_id": 1,
            "order": 31,
            "example_endpoint_url": "/api/v1/college-university/ipeds/completions-cip-2/2009/",
            "endpoint_url": "/api/v1/college-university/ipeds/completions-cip-2/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Awards",
            "sub_topic": "By 2-digit CIP code",
            "datasource_id": 1,
            "years_available": "1991&ndash;2022",
            "description": "This endpoint contains the number of awards by type of program, level of award (certificate or degree), first or second major, and by race and ethnicity and gender. Type of program is categorized according to the 2-digit Classification of Instructional Programs (CIP), a detailed coding system for postsecondary instructional programs, which groups the 6-digit CIPs into their families. There are some exceptions, such as law and medical fields, which were reported as 6-digits by the Integrated Postsecondary Education Data System. IPEDS reported data at the 2-digit CIP level until 2001; after that, the 6-digit CIP data were collapsed to the 2-digit level.",
            "var_list_id": 17,
            "stata_code": "educationdata using \\\"college ipeds completions-cip-2\\\", sub(year=2009)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"completions-cip-2\\\",\\nfilters = list(year = 2009))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 55,
            "page_id": 2,
            "order": 31,
            "example_endpoint_url": "/api/v1/schools/crdc/ap-exams/2011/disability/sex/",
            "endpoint_url": "/api/v1/schools/crdc/ap-exams/{year}/disability/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "AP Exams",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students taking  AP exams, and the number of students passing AP exams, by students' disability status and sex.",
            "var_list_id": 35,
            "stata_code": "educationdata using \\\"school crdc ap-exams disability sex\\\", sub(year=2011)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"ap-exams\\\",\\nfilters = list(year = 2011),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 33,
            "page_id": 1,
            "order": 32,
            "example_endpoint_url": "/api/v1/college-university/ipeds/completions-cip-6/2009/",
            "endpoint_url": "/api/v1/college-university/ipeds/completions-cip-6/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": "Awards",
            "sub_topic": "By 6-digit CIP code",
            "datasource_id": 1,
            "years_available": "1983&ndash;2022",
            "description": "This endpoint contains the number of awards by type of program, level of award (certificate or degree), first or second major, and by race and ethnicity and gender. Type of program is categorized according to the 6-digit Classification of Instructional Programs (CIP), a detailed coding system for postsecondary instructional programs, which changes over time.",
            "var_list_id": 44,
            "stata_code": "educationdata using \\\"college ipeds completions-cip-6\\\", sub(year=2009)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"completions-cip-6\\\",\\nfilters = list(year = 2009))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 57,
            "page_id": 2,
            "order": 32,
            "example_endpoint_url": "/api/v1/schools/crdc/ap-exams/2013/lep/sex/",
            "endpoint_url": "/api/v1/schools/crdc/ap-exams/{year}/lep/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "AP Exams",
            "sub_topic": "By LEP and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students taking  AP exams, and the number of students passing AP exams, by students' Limited English Proficiency status and sex.",
            "var_list_id": 35,
            "stata_code": "educationdata using \\\"school crdc ap-exams lep sex\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"ap-exams\\\",\\nfilters = list(year = 2015),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 45,
            "page_id": 1,
            "order": 33,
            "example_endpoint_url": "/api/v1/college-university/ipeds/academic-libraries/2013/",
            "endpoint_url": "/api/v1/college-university/ipeds/academic-libraries/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": null,
            "sub_topic": "Academic Libraries",
            "datasource_id": 1,
            "years_available": "2013&ndash;2020",
            "description": "This endpoint contains information on the academic institution's electronic and physical library, collections, expenditures, and services. These data are available only for degree-granting institutions, and expenditure data are available only for institutions with total expenditures above $100,000.",
            "var_list_id": 31,
            "stata_code": "educationdata using \\\"college ipeds academic-libraries\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"academic-libraries\\\",\\nfilters = list(year = 2013))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 49,
            "page_id": 2,
            "order": 33,
            "example_endpoint_url": "/api/v1/schools/crdc/sat-act-participation/2013/race/sex/",
            "endpoint_url": "/api/v1/schools/crdc/sat-act-participation/{year}/race/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "SAT and ACT participation",
            "sub_topic": "By race and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students taking the SAT or ACT, by race and sex.",
            "var_list_id": 33,
            "stata_code": "educationdata using \\\"school crdc sat-act-participation race sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"sat-act-participation\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 50,
            "page_id": 2,
            "order": 34,
            "example_endpoint_url": "/api/v1/schools/crdc/sat-act-participation/2011/disability/sex/",
            "endpoint_url": "/api/v1/schools/crdc/sat-act-participation/{year}/disability/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "SAT and ACT participation",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students taking the SAT or ACT, by disability status and sex.",
            "var_list_id": 33,
            "stata_code": "educationdata using \\\"school crdc sat-act-participation disability sex\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"sat-act-participation\\\",\\nfilters = list(year = 2015),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 102,
            "page_id": 1,
            "order": 34,
            "example_endpoint_url": "/api/v1/college-university/ipeds/salaries-instructional-staff/2016/",
            "endpoint_url": "/api/v1/college-university/ipeds/salaries-instructional-staff/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": null,
            "sub_topic": "Instructional Staff Salaries",
            "datasource_id": 1,
            "years_available": "1980, 1984, 1985, 1987, 1989&ndash;1999, 2001&ndash;2022",
            "description": "This endpoint contains the number of staff, \u00c2\u00a0total salary outlays and average salaries of full-time, nonmedical, instructional staff by academic rank, contract length, and sex.",
            "var_list_id": 70,
            "stata_code": "educationdata using \\\"college ipeds salaries-instructional-staff\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"salaries-instructional-staff\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 51,
            "page_id": 2,
            "order": 35,
            "example_endpoint_url": "/api/v1/schools/crdc/sat-act-participation/2015/lep/sex/",
            "endpoint_url": "/api/v1/schools/crdc/sat-act-participation/{year}/lep/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "SAT and ACT participation",
            "sub_topic": "By LEP and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains the number of students taking the SAT or ACT, by limited English proficiency status and sex.",
            "var_list_id": 33,
            "stata_code": "educationdata using \\\"school crdc sat-act-participation lep sex\\\", sub(year=2013)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"sat-act-participation\\\",\\nfilters = list(year = 2013),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 103,
            "page_id": 1,
            "order": 35,
            "example_endpoint_url": "/api/v1/college-university/ipeds/salaries-noninstructional-staff/2016/",
            "endpoint_url": "/api/v1/college-university/ipeds/salaries-noninstructional-staff/{year}/",
            "section": "College_university",
            "class_name": "IPEDS",
            "topic": null,
            "sub_topic": "Noninstructional Staff Salaries",
            "datasource_id": 1,
            "years_available": "2012&ndash;2022",
            "description": "This endpoint contains the number and salary outlays for full-time, nonmedical, noninstructional staff by occupational category.",
            "var_list_id": 71,
            "stata_code": "educationdata using \\\"college ipeds salaries-noninstructional-staff\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"ipeds\\\",\\ntopic = \\\"salaries-noninstructional-staff\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 63,
            "page_id": 1,
            "order": 36,
            "example_endpoint_url": "/api/v1/college-university/scorecard/institutional-characteristics/2000/",
            "endpoint_url": "/api/v1/college-university/scorecard/institutional-characteristics/{year}/",
            "section": "College_university",
            "class_name": "Scorecard",
            "topic": null,
            "sub_topic": "Institutional Characteristics",
            "datasource_id": 4,
            "years_available": "1996&ndash;2020",
            "description": "This endpoint contains institutional characteristics for each college or university, primarily including flags for minority-serving institutions. To avoid duplication, we exclude data that College Scorecard sourced from IPEDS. For these data, you can see the other Institutional Characteristics and Directory endpoints. Notably, most of the information contained in this endpoint can be found in 2016 and aside from identification and year, only predominant degree awarded is available in other years.",
            "var_list_id": 39,
            "stata_code": "educationdata using \\\"college scorecard institutional-characteristics\\\", sub(year=2008)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"scorecard\\\",\\ntopic = \\\"institutional-characteristics\\\",\\nfilters = list(year = 2008))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 52,
            "page_id": 2,
            "order": 36,
            "example_endpoint_url": "/api/v1/schools/crdc/teachers-staff/2015/",
            "endpoint_url": "/api/v1/schools/crdc/teachers-staff/{year}/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": null,
            "sub_topic": "Teachers and Staff",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains data on the number of FTE teachers and staff at each school.",
            "var_list_id": 34,
            "stata_code": "educationdata using \\\"school crdc teachers-staff\\\", sub(year=2015)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"teachers-staff\\\",\\nfilters = list(year = 2015))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 68,
            "page_id": 1,
            "order": 37,
            "example_endpoint_url": "/api/v1/college-university/scorecard/student-characteristics/2011/aid-applicants/",
            "endpoint_url": "/api/v1/college-university/scorecard/student-characteristics/{year}/aid-applicants/",
            "section": "College_university",
            "class_name": "Scorecard",
            "topic": "Student Characteristics",
            "sub_topic": "Student aid applicant characteristics",
            "datasource_id": 4,
            "years_available": "1997&ndash;2016",
            "description": "This endpoint contains detailed data on student aid applicants in each institution, including income level, dependency status, number of college students sent Free Application for Federal Student Aid (FAFSA) forms to, and other student demographics. These data are produced for rolling two-year pooled entry cohorts by the National Student Loan Data System (e.g., the 1997 data represent information from two cohorts, assessment year 1996&ndash;97 and assessment year 1997&ndash;98).",
            "var_list_id": 42,
            "stata_code": "educationdata using \\\"college scorecard student-characteristics aid-applicants\\\", sub(year=2011)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"scorecard\\\",\\ntopic = \\\"student-characteristics\\\",\\nfilters = list(year = 2011),\\nsubtopic = list(\\\"aid-applicants\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 107,
            "page_id": 2,
            "order": 37,
            "example_endpoint_url": "/api/v1/schools/crdc/math-and-science/2017/race/sex/",
            "endpoint_url": "/api/v1/schools/crdc/math-and-science/{year}/race/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Math and Science Course Enrollment",
            "sub_topic": "By race and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains data on enrollment in Biology, Chemistry, Advanced Math, Calculus, Algebra II, Physics, and Geometry courses by race and sex.",
            "var_list_id": 76,
            "stata_code": "educationdata using \\\"school crdc math-and-science race sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"math-and-science\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 70,
            "page_id": 1,
            "order": 38,
            "example_endpoint_url": "/api/v1/college-university/scorecard/student-characteristics/2009/home-neighborhood/",
            "endpoint_url": "/api/v1/college-university/scorecard/student-characteristics/{year}/home-neighborhood/",
            "section": "College_university",
            "class_name": "Scorecard",
            "topic": "Student Characteristics",
            "sub_topic": "Student home neighborhood characteristics",
            "datasource_id": 4,
            "years_available": "1997&ndash;2016",
            "description": "This endpoint contains detailed demographic information on cohorts of students, based on when they enroll in college. These data describe the population residing in the students' home zip codes, including information about race, education level, nationality, poverty status, household income, and employment status. The US Treasury Department calculated these data elements using census data for two-year pooled cohorts at each institution (e.g., the 2005 file includes the 2004&ndash;05 and 2005&ndash;06 earnings cohorts).  Home zip codes are determined using information from when the student first applied for financial aid.",
            "var_list_id": 43,
            "stata_code": "educationdata using \\\"college scorecard student-characteristics home-neighborhood\\\", sub(year=2009)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"scorecard\\\",\\ntopic = \\\"student-characteristics\\\",\\nfilters = list(year = 2009),\\nsubtopic = list(\\\"home-neighborhood\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 108,
            "page_id": 2,
            "order": 38,
            "example_endpoint_url": "/api/v1/schools/crdc/math-and-science/2017/disability/sex/",
            "endpoint_url": "/api/v1/schools/crdc/math-and-science/{year}/disability/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Math and Science Course Enrollment",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains data on enrollment in Biology, Chemistry, Advanced Math, Calculus, Algebra II, Physics, and Geometry courses by disability and sex.",
            "var_list_id": 76,
            "stata_code": "educationdata using \\\"school crdc math-and-science disability sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"math-and-science\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 62,
            "page_id": 1,
            "order": 39,
            "example_endpoint_url": "/api/v1/college-university/scorecard/earnings/2012/",
            "endpoint_url": "/api/v1/college-university/scorecard/earnings/{year}/",
            "section": "College_university",
            "class_name": "Scorecard",
            "topic": null,
            "sub_topic": "Earnings",
            "datasource_id": 4,
            "years_available": "2003&ndash;2014, 2018",
            "description": "This endpoint contains information on earnings for former students, by their pooled entry cohort and institution. This information may be available 6, 7, 8, 9, and 10 years after the pooled cohort entered college, but availability varies by cohort. For example, the assessment year (AY) 1996&ndash;97 and AY 1997&ndash;98 pooled cohort has earnings data available 6, 7, 8, 9, and 10 years after entry, but the AY 2001-02 and AY 2002&ndash;03 pooled cohort only has earnings data 10 years after entry and the AY 2003&ndash;04 and AY 2004&ndash;05 pooled cohort only has earnings data 8 years after entry.",
            "var_list_id": 38,
            "stata_code": "educationdata using \\\"college scorecard earnings\\\", sub(year=2012)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"scorecard\\\",\\ntopic = \\\"earnings\\\",\\nfilters = list(year = 2012))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 109,
            "page_id": 2,
            "order": 39,
            "example_endpoint_url": "/api/v1/schools/crdc/math-and-science/2017/lep/sex/",
            "endpoint_url": "/api/v1/schools/crdc/math-and-science/{year}/lep/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Math and Science Course Enrollment",
            "sub_topic": "By LEP and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains data on enrollment in Biology, Chemistry, Advanced Math, Calculus, Algebra II, Physics, and Geometry courses by limited English proficiency status and sex.",
            "var_list_id": 76,
            "stata_code": "educationdata using \\\"school crdc math-and-science lep sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"math-and-science\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 64,
            "page_id": 1,
            "order": 40,
            "example_endpoint_url": "/api/v1/college-university/scorecard/default/2012/",
            "endpoint_url": "/api/v1/college-university/scorecard/default/{year}/",
            "section": "College_university",
            "class_name": "Scorecard",
            "topic": null,
            "sub_topic": "Default",
            "datasource_id": 4,
            "years_available": "1996&ndash;2020",
            "description": "This endpoint contains information on the default rates by cohort for two or three years after students entered repayment. The two-year default rate is available from 1996 to 2012, and the three-year default rate is available starting in 2011. The cohorts are those that entered repayment two or three years before the year of measurement. For example, those who entered repayment between October 1, 2012, and September 30, 2013 (which we identify as cohort 2012, but corresponds with fiscal year 2013), have their three-year default rate measured as of September 30, 2015 (year 2015).",
            "var_list_id": 40,
            "stata_code": "educationdata using \\\"college scorecard default\\\", sub(year=2012)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"scorecard\\\",\\ntopic = \\\"default\\\",\\nfilters = list(year = 2012))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 120,
            "page_id": 2,
            "order": 40,
            "example_endpoint_url": "/api/v1/schools/crdc/algebra1/2017/race/sex/",
            "endpoint_url": "/api/v1/schools/crdc/algebra1/{year}/race/sex",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Algebra I",
            "sub_topic": "By race and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains data on the number of students enrolled in and passing Algebra I by race and sex.",
            "var_list_id": 83,
            "stata_code": "educationdata using \\\"school crdc algebra1 race sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"algebra1\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 66,
            "page_id": 1,
            "order": 41,
            "example_endpoint_url": "/api/v1/college-university/scorecard/repayment/2010/",
            "endpoint_url": "/api/v1/college-university/scorecard/repayment/{year}/",
            "section": "College_university",
            "class_name": "Scorecard",
            "topic": null,
            "sub_topic": "Repayment",
            "datasource_id": 4,
            "years_available": "2007&ndash;2016",
            "description": "This endpoint contains detailed repayment data by pooled cohort and institution. These data are also available by subgroup, including dependency status, Pell recipiency, first-generation status, sex, and income level. These repayment rates are measured one, three, five, and seven years after the cohort enters repayment. For example the one-year repayment rate for fiscal year (FY) 2008 and FY 2009 cohorts (cohort_year 2008) are measured in FY 2009 and FY 2010 (year 2009), respectively.",
            "var_list_id": 41,
            "stata_code": "educationdata using \\\"college scorecard repayment\\\", sub(year=2010)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"scorecard\\\",\\ntopic = \\\"repayment\\\",\\nfilters = list(year = 2010))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 121,
            "page_id": 2,
            "order": 41,
            "example_endpoint_url": "/api/v1/schools/crdc/algebra1/2017/disability/sex/",
            "endpoint_url": "/api/v1/schools/crdc/algebra1/{year}/disability/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Algebra I",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains data on the number of students enrolled in and passing Algebra I by disability status and sex.",
            "var_list_id": 83,
            "stata_code": "educationdata using \\\"school crdc algebra1 disability sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"algebra1\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 85,
            "page_id": 1,
            "order": 42,
            "example_endpoint_url": "/api/v1/college-university/nhgis/census-2010/2016/",
            "endpoint_url": "/api/v1/college-university/nhgis/census-2010/{year}/",
            "section": "College_university",
            "class_name": "NHGIS",
            "topic": "Geographic Variables",
            "sub_topic": "2010 Census geographies",
            "datasource_id": 9,
            "years_available": "1980, 1984&ndash;2021",
            "description": "This endpoint contains geographic variables corresponding to 2010 Census geographies for each IPEDS institution. Geographies are merged on by latitude and longitude when available; when unavailable, latitudes and longitudes were obtained from address information using Urban's geocoder. The geocoder uses StreetMap Premium from Esri to perform accurate offline geocoding. Geocode accuracy variables indicate the degree of precision of this geocoding. Additional information on the match accuracy can be found <a href=\"https://developers.arcgis.com/rest/geocode/api-reference/geocoding-service-output.htm\">here</a>. Geographies for older years of data or low-accuracy geocode matches should be used with caution.",
            "var_list_id": 51,
            "stata_code": "educationdata using \\\"college nhgis census-2010\\\", sub(year=2009)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"nhgis\\\",\\ntopic = \\\"census-2010\\\",\\nfilters = list(year = 2009))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 122,
            "page_id": 2,
            "order": 42,
            "example_endpoint_url": "/api/v1/schools/crdc/algebra1/2017/lep/sex/",
            "endpoint_url": "/api/v1/schools/crdc/algebra1/{year}/lep/sex/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Algebra I",
            "sub_topic": "By LEP and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains data on the number of students enrolled in and passing Algebra I by Limited English Proficiency status and sex.",
            "var_list_id": 83,
            "stata_code": "educationdata using \\\"school crdc algebra1 lep sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"algebra1\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 86,
            "page_id": 1,
            "order": 43,
            "example_endpoint_url": "/api/v1/college-university/nhgis/census-2000/2016/",
            "endpoint_url": "/api/v1/college-university/nhgis/census-2000/{year}/",
            "section": "College_university",
            "class_name": "NHGIS",
            "topic": "Geographic Variables",
            "sub_topic": "2000 Census geographies",
            "datasource_id": 9,
            "years_available": "1980, 1984&ndash;2021",
            "description": "This endpoint contains geographic variables corresponding to 2000 Census geographies for each IPEDS institution. Geographies are merged on by latitude and longitude when available; when unavailable, latitudes and longitudes were obtained from address information using Urban's geocoder. The geocoder uses StreetMap Premium from Esri to perform accurate offline geocoding. Geocode accuracy variables indicate the degree of precision of this geocoding. Additional information on the match accuracy can be found <a href=\"https://developers.arcgis.com/rest/geocode/api-reference/geocoding-service-output.htm\">here</a>.  Geographies for older years of data or low-accuracy geocode matches should be used with caution.",
            "var_list_id": 52,
            "stata_code": "educationdata using \\\"college nhgis census-2000\\\", sub(year=2009)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"nhgis\\\",\\ntopic = \\\"census-2000\\\",\\nfilters = list(year = 2009))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 110,
            "page_id": 2,
            "order": 43,
            "example_endpoint_url": "/api/v1/schools/crdc/offenses/2017/",
            "endpoint_url": "/api/v1/schools/crdc/offenses/{year}/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": null,
            "sub_topic": "Offenses",
            "datasource_id": 3,
            "years_available": "2015, 2017",
            "description": "This endpoint contains data on the number of criminal incidents in schools.",
            "var_list_id": 77,
            "stata_code": "educationdata using \\\"school crdc offenses\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"offenses\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 87,
            "page_id": 1,
            "order": 44,
            "example_endpoint_url": "/api/v1/college-university/nhgis/census-1990/2016/",
            "endpoint_url": "/api/v1/college-university/nhgis/census-1990/{year}/",
            "section": "College_university",
            "class_name": "NHGIS",
            "topic": "Geographic Variables",
            "sub_topic": "1990 Census geographies",
            "datasource_id": 9,
            "years_available": "1980, 1984&ndash;2021",
            "description": "This endpoint contains geographic variables corresponding to 1990 Census geographies for each IPEDS institution. Geographies are merged on by latitude and longitude when available; when unavailable, latitudes and longitudes were obtained from address information using Urban's geocoder. The geocoder uses StreetMap Premium from Esri to perform accurate offline geocoding. Geocode accuracy variables indicate the degree of precision of this geocoding. Additional information on the match accuracy can be found <a href=\"https://developers.arcgis.com/rest/geocode/api-reference/geocoding-service-output.htm\">here</a>.  Geographies for older years of data or low-accuracy geocode matches should be used with caution.",
            "var_list_id": 53,
            "stata_code": "educationdata using \\\"college nhgis census-1990\\\", sub(year=2009)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"nhgis\\\",\\ntopic = \\\"census-1990\\\",\\nfilters = list(year = 2009))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 111,
            "page_id": 2,
            "order": 44,
            "example_endpoint_url": "/api/v1/schools/crdc/dual-enrollment/2017/race/sex",
            "endpoint_url": "/api/v1/schools/crdc/dual-enrollment/{year}/race/sex",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Dual Enrollment",
            "sub_topic": "By race and sex",
            "datasource_id": 3,
            "years_available": "2015, 2017",
            "description": "This endpoint contains data that indicates whether the school has any students enrolled in a dual enrollment/dual credit program by race and sex.",
            "var_list_id": 78,
            "stata_code": "educationdata using \\\"school crdc dual-enrollment race sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"dual-enrollment\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 92,
            "page_id": 1,
            "order": 45,
            "example_endpoint_url": "/api/v1/college-university/fsa/financial-responsibility/2016/",
            "endpoint_url": "/api/v1/college-university/fsa/financial-responsibility/{year}/",
            "section": "College_university",
            "class_name": "FSA",
            "topic": null,
            "sub_topic": "Financial Responsibility Composite Scores",
            "datasource_id": 10,
            "years_available": "2006&ndash;2016",
            "description": "This endpoint contains financial responsibility composites scores for for-profit and nonprofit institutions. These scores gauge an institution's financial health and help the Department of Education assess an institution's financial responsibility compliance. The scores are based on a primary reserve ratio, an equity ratio, and a net income ratio. They are collected at the OPEID level, but we report them at the UNITID level in order to facilitate merging with IPEDS data.",
            "var_list_id": 58,
            "stata_code": "educationdata using \\\"college fsa financial-responsibility\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"fsa\\\",\\ntopic = \\\"financial-responsibility\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 112,
            "page_id": 2,
            "order": 45,
            "example_endpoint_url": "/api/v1/schools/crdc/dual-enrollment/2017/disability/sex",
            "endpoint_url": "/api/v1/schools/crdc/dual-enrollment/{year}/disability/sex",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Dual Enrollment",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2015, 2017",
            "description": "This endpoint contains data that indicates whether the school has any students enrolled in a dual enrollment/dual credit program by disability and sex.",
            "var_list_id": 78,
            "stata_code": "educationdata using \\\"school crdc dual-enrollment disability sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"dual-enrollment\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 93,
            "page_id": 1,
            "order": 46,
            "example_endpoint_url": "/api/v1/college-university/fsa/grants/2016/",
            "endpoint_url": "/api/v1/college-university/fsa/grants/{year}/",
            "section": "College_university",
            "class_name": "FSA",
            "topic": "Title IV Aid",
            "sub_topic": "Grants",
            "datasource_id": 10,
            "years_available": "1999&ndash;2018",
            "description": "This endpoint contains data on Title IV grant volume and total recipients by institution and year. These data are collected by the Office of Federal Student Aid at the OPEID level, and we have provided them at the unit ID level. Where these differ, amounts have been allocated to each institution based on full-time equivalent students. To avoid double-counting, users should use the _unitid variables; _opeid variables are the original amounts and will lead to double-counting unless only one record per OPEID year is kept.",
            "var_list_id": 59,
            "stata_code": "educationdata using \\\"college fsa grants\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"fsa\\\",\\ntopic = \\\"grants\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 113,
            "page_id": 2,
            "order": 46,
            "example_endpoint_url": "/api/v1/schools/crdc/dual-enrollment/2017/lep/sex",
            "endpoint_url": "/api/v1/schools/crdc/dual-enrollment/{year}/lep/sex",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Dual Enrollment",
            "sub_topic": "By LEP and sex",
            "datasource_id": 3,
            "years_available": "2015, 2017",
            "description": "This endpoint contains data that indicates whether the school has any students enrolled in a dual enrollment/dual credit program by limited English proficiency status and sex.",
            "var_list_id": 78,
            "stata_code": "educationdata using \\\"school crdc dual-enrollment lep sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"dual-enrollment\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 94,
            "page_id": 1,
            "order": 47,
            "example_endpoint_url": "/api/v1/college-university/fsa/loans/2016/",
            "endpoint_url": "/api/v1/college-university/fsa/loans/{year}/",
            "section": "College_university",
            "class_name": "FSA",
            "topic": "Title IV Aid",
            "sub_topic": "Loans",
            "datasource_id": 10,
            "years_available": "1999&ndash;2018",
            "description": "This endpoint contains data on Title IV loan volume and total recipients by institution and year. These data are collected by the Office of Federal Student Aid at the OPEID level, and we have provided them at the unit ID level. Where these differ, amounts have been allocated to each institution based on full-time equivalent students. To avoid double-counting, users should use the _unitid variables; _opeid variables are the original amounts and will lead to double-counting unless only one record per OPEID year is kept.",
            "var_list_id": 60,
            "stata_code": "educationdata using \\\"college fsa loans\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"fsa\\\",\\ntopic = \\\"loans\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 114,
            "page_id": 2,
            "order": 47,
            "example_endpoint_url": "/api/v1/schools/crdc/credit-recovery/2017/",
            "endpoint_url": "/api/v1/schools/crdc/credit-recovery/{year}/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": null,
            "sub_topic": "Credit Recovery",
            "datasource_id": 3,
            "years_available": "2015, 2017",
            "description": "This endpoint contains data on student enrollment in credit recovery.",
            "var_list_id": 79,
            "stata_code": "educationdata using \\\"school crdc credit-recovery\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"credit-recovery\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 95,
            "page_id": 1,
            "order": 48,
            "example_endpoint_url": "/api/v1/college-university/fsa/campus-based-volume/2016/",
            "endpoint_url": "/api/v1/college-university/fsa/campus-based-volume/{year}/",
            "section": "College_university",
            "class_name": "FSA",
            "topic": "Title IV Aid",
            "sub_topic": "Campus-based awards",
            "datasource_id": 10,
            "years_available": "2001&ndash;2017",
            "description": "This endpoint contains data on Title IV campus-based programs volume and total recipients by institution and year. These data are collected by the Office of Federal Student Aid at the OPEID level, and we have provided them at the unit ID level. Where these differ, amounts have been allocated to each institution based on full-time equivalent students. To avoid double-counting, users should use the _unitid variables; _opeid variables are the original amounts and will lead to double-counting unless only one record per OPEID year is kept.",
            "var_list_id": 61,
            "stata_code": "educationdata using \\\"college fsa campus-based-volume\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"fsa\\\",\\ntopic = \\\"campus-based-volume\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 115,
            "page_id": 2,
            "order": 48,
            "example_endpoint_url": "/api/v1/schools/crdc/suspensions-days/2017/race/sex",
            "endpoint_url": "/api/v1/schools/crdc/suspensions-days/{year}/race/sex",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Days Suspended",
            "sub_topic": "By race and sex",
            "datasource_id": 3,
            "years_available": "2015, 2017",
            "description": "This endpoint contains the number of days students missed due to suspensions by race and sex.",
            "var_list_id": 80,
            "stata_code": "educationdata using \\\"school crdc suspensions-days race sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"suspensions-days\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 104,
            "page_id": 1,
            "order": 49,
            "example_endpoint_url": "/api/v1/college-university/fsa/90-10-revenue-percentages/2016/",
            "endpoint_url": "/api/v1/college-university/fsa/90-10-revenue-percentages/{year}/",
            "section": "College_university",
            "class_name": "FSA",
            "topic": null,
            "sub_topic": "90-10 Revenue Percentages",
            "datasource_id": 10,
            "years_available": "2014&ndash;2017",
            "description": "This endpoint contains the amount and percentage of each proprietary institution's revenues from Title IV sources and non&ndash;Title IV sources as provided by the institution in its audited financial statements.",
            "var_list_id": 72,
            "stata_code": "educationdata using \\\"college fsa 90-10-revenue-percentages\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"fsa\\\",\\ntopic = \\\"90-10-revenue-percentages\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 116,
            "page_id": 2,
            "order": 49,
            "example_endpoint_url": "/api/v1/schools/crdc/suspensions-days/2017/disability/sex",
            "endpoint_url": "/api/v1/schools/crdc/suspensions-days/{year}/disability/sex",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Days Suspended",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2015, 2017",
            "description": "This endpoint contains the number of days students missed due to suspensions by disability and sex.",
            "var_list_id": 80,
            "stata_code": "educationdata using \\\"school crdc suspensions-days disability sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"suspensions-days\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 105,
            "page_id": 1,
            "order": 50,
            "example_endpoint_url": "/api/v1/college-university/nacubo/endowments/2016/",
            "endpoint_url": "/api/v1/college-university/nacubo/endowments/{year}/",
            "section": "College_university",
            "class_name": "NACUBO",
            "topic": null,
            "sub_topic": "Endowments",
            "datasource_id": 11,
            "years_available": "2012&ndash;2021",
            "description": "This endpoint contains data on annual endowments.",
            "var_list_id": 73,
            "stata_code": "educationdata using \\\"college nacubo endowments\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"nacubo\\\",\\ntopic = \\\"endowments\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 117,
            "page_id": 2,
            "order": 50,
            "example_endpoint_url": "/api/v1/schools/crdc/suspensions-days/2017/lep/sex",
            "endpoint_url": "/api/v1/schools/crdc/suspensions-days/{year}/lep/sex",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Days Suspended",
            "sub_topic": "By LEP and sex",
            "datasource_id": 3,
            "years_available": "2015, 2017",
            "description": "This endpoint contains the number of days students missed due to suspensions by limited English proficiency status and sex.",
            "var_list_id": 80,
            "stata_code": "educationdata using \\\"school crdc suspensions-days lep sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"suspensions-days\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 106,
            "page_id": 1,
            "order": 51,
            "example_endpoint_url": "/api/v1/college-university/nccs/990-forms/2016/",
            "endpoint_url": "/api/v1/college-university/nccs/990-forms/{year}/",
            "section": "College_university",
            "class_name": "NCCS",
            "topic": null,
            "sub_topic": "990 Forms",
            "datasource_id": 12,
            "years_available": "1993&ndash;2016",
            "description": "This endpoint contains data from 990 tax forms filed annually by nonprofit organizations.",
            "var_list_id": 74,
            "stata_code": "educationdata using \\\"college nccs 990-forms\\\", sub(year=2016)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"nccs\\\",\\ntopic = \\\"990-forms\\\",\\nfilters = list(year = 2016))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 118,
            "page_id": 2,
            "order": 51,
            "example_endpoint_url": "/api/v1/schools/crdc/offerings/2017/",
            "endpoint_url": "/api/v1/schools/crdc/offerings/{year}/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": null,
            "sub_topic": "Offerings",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains details on the number and types of classes offered in schools.",
            "var_list_id": 81,
            "stata_code": "educationdata using \\\"school crdc offerings\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"offerings\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 123,
            "page_id": 2,
            "order": 52,
            "example_endpoint_url": "/api/v1/schools/crdc/school-finance/2017/",
            "endpoint_url": "/api/v1/schools/crdc/school-finance/{year}/",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": null,
            "sub_topic": "School Finance",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains school finance data.",
            "var_list_id": 84,
            "stata_code": "educationdata using \\\"school crdc school-finance\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"school-finance\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 128,
            "page_id": 1,
            "order": 52,
            "example_endpoint_url": "/api/v1/college-university/eada/institutional-characteristics/2016",
            "endpoint_url": "/api/v1/college-university/eada/institutional-characteristics/{year}/",
            "section": "College_university",
            "class_name": "EADA",
            "topic": "Athletic Participation and Expenditures",
            "sub_topic": "By institution",
            "datasource_id": 14,
            "years_available": "2002&ndash;2021",
            "description": "This endpoint contains data, for each college or university, on athletic participation and expenditures as required by the Equity in Athletics Disclosure Act (EADA), by all co-educational postsecondary institutions that receive Title IV funding (i.e., those that participate in federal student aid programs) and that have an intercollegiate athletics program.",
            "var_list_id": 87,
            "stata_code": "educationdata using \\\"college eada institutional-characteristics\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"college-university\\\",\\nsource = \\\"eada\\\",\\ntopic = \\\"institutional-characteristics\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 124,
            "page_id": 2,
            "order": 53,
            "example_endpoint_url": "/api/v1/schools/crdc/retention/2017/grade-3/race/sex",
            "endpoint_url": "/api/v1/schools/crdc/retention/{year}/{grade}/race/sex",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Retention",
            "sub_topic": "By race and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains data on the number of students retained in a school.",
            "var_list_id": 85,
            "stata_code": "educationdata using \\\"school crdc retention race sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"retention\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"race\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 125,
            "page_id": 2,
            "order": 54,
            "example_endpoint_url": "/api/v1/schools/crdc/retention/2017/grade-3/disability/sex",
            "endpoint_url": "/api/v1/schools/crdc/retention/{year}/{grade}/disability/sex",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Retention",
            "sub_topic": "By disability and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains data on the number of students retained in a school.",
            "var_list_id": 85,
            "stata_code": "educationdata using \\\"school crdc retention disability sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"retention\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"disability\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 126,
            "page_id": 2,
            "order": 55,
            "example_endpoint_url": "/api/v1/schools/crdc/retention/2017/grade-3/lep/sex",
            "endpoint_url": "/api/v1/schools/crdc/retention/{year}/{grade}/lep/sex",
            "section": "Schools",
            "class_name": "CRDC",
            "topic": "Retention",
            "sub_topic": "By LEP and sex",
            "datasource_id": 3,
            "years_available": "2011, 2013, 2015, 2017",
            "description": "This endpoint contains data on the number of students retained in a school.",
            "var_list_id": 85,
            "stata_code": "educationdata using \\\"school crdc retention lep sex\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"crdc\\\",\\ntopic = \\\"retention\\\",\\nfilters = list(year = 2017),\\nsubtopic = list(\\\"lep\\\", \\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 76,
            "page_id": 2,
            "order": 56,
            "example_endpoint_url": "/api/v1/schools/edfacts/assessments/2014/grade-8/",
            "endpoint_url": "/api/v1/schools/edfacts/assessments/{year}/{grade_edfacts}/",
            "section": "Schools",
            "class_name": "EDFacts",
            "topic": "State Assessments",
            "sub_topic": "By grade",
            "datasource_id": 8,
            "years_available": "2009&ndash;2018, 2020",
            "description": "This endpoint contains school-level achievement results for state assessments in mathematics and reading or language arts, by grade. It includes the number of students who completed each assessment for whom a proficiency level was assigned and the proficiency share. The proficiency share is reported as a range, unless there are more than 300 students in the subgroup, with the magnitude of the range decreasing as the number of students reported increases. States can change their statewide assessments, academic standards, or thresholds for proficiency levels, leading to changes in the proficiency share from year to year. The proficiency shares for Virginia's 2016&ndash;17 grade 5&ndash;8 math assessments are too low. Users should instead refer to the Virginia Department of Education's Statistics and Reports <a href=\"http://www.doe.virginia.gov/statistics_reports/index.shtml\">website</a> for accurate data.",
            "var_list_id": 48,
            "stata_code": "educationdata using \\\"school edfacts assessments\\\", sub(year=2014 grade_edfacts=8)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"edfacts\\\",\\ntopic = \\\"assessments\\\",\\nfilters = list(year = 2014, grade_edfacts = 8))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 77,
            "page_id": 2,
            "order": 57,
            "example_endpoint_url": "/api/v1/schools/edfacts/assessments/2013/grade-3/race/",
            "endpoint_url": "/api/v1/schools/edfacts/assessments/{year}/{grade_edfacts}/race/",
            "section": "Schools",
            "class_name": "EDFacts",
            "topic": "State Assessments",
            "sub_topic": "By grade and race",
            "datasource_id": 8,
            "years_available": "2009&ndash;2018, 2020",
            "description": "This endpoint contains school-level achievement results for state assessments in mathematics and reading or language arts, by grade and race or ethnicity. It includes the number of students who completed each assessment for whom a proficiency level was assigned and the proficiency share. The proficiency share is reported as a range, unless there are more than 300 students in the subgroup, with the magnitude of the range decreasing as the number of students reported increases. States can change their statewide assessments, academic standards, or thresholds for proficiency levels, leading to changes in the proficiency share from year to year. The proficiency shares for Virginia's 2016&ndash;17 grade 5&ndash;8 math assessments are too low. Users should instead refer to the Virginia Department of Education's Statistics and Reports <a href=\"http://www.doe.virginia.gov/statistics_reports/index.shtml\">website</a> for accurate data.",
            "var_list_id": 48,
            "stata_code": "educationdata using \\\"school edfacts assessments race\\\", sub(year=2013 grade_edfacts=3)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"edfacts\\\",\\ntopic = \\\"assessments\\\",\\nfilters = list(year = 2013, grade_edfacts = 3),\\nsubtopic = list(\\\"race\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 78,
            "page_id": 2,
            "order": 58,
            "example_endpoint_url": "/api/v1/schools/edfacts/assessments/2012/grade-5/sex/",
            "endpoint_url": "/api/v1/schools/edfacts/assessments/{year}/{grade_edfacts}/sex/",
            "section": "Schools",
            "class_name": "EDFacts",
            "topic": "State Assessments",
            "sub_topic": "By grade and sex",
            "datasource_id": 8,
            "years_available": "2009&ndash;2018, 2020",
            "description": "This endpoint contains school-level achievement results for state assessments in mathematics and reading or language arts, by grade and sex. It includes the number of students who completed each assessment for whom a proficiency level was assigned and the proficiency share. The proficiency share is reported as a range, unless there are more than 300 students in the subgroup, with the magnitude of the range decreasing as the number of students reported increases. States can change their statewide assessments, academic standards, or thresholds for proficiency levels, leading to changes in the proficiency share from year to year. The proficiency shares for Virginia's 2016&ndash;17 grade 5&ndash;8 math assessments are too low. Users should instead refer to the Virginia Department of Education's Statistics and Reports <a href=\"http://www.doe.virginia.gov/statistics_reports/index.shtml\">website</a> for accurate data.",
            "var_list_id": 48,
            "stata_code": "educationdata using \\\"school edfacts assessments sex\\\", sub(year=2012 grade_edfacts=5)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"edfacts\\\",\\ntopic = \\\"assessments\\\",\\nfilters = list(year = 2012, grade_edfacts = 5),\\nsubtopic = list(\\\"sex\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 79,
            "page_id": 2,
            "order": 59,
            "example_endpoint_url": "/api/v1/schools/edfacts/assessments/2009/grade-6/special-populations/",
            "endpoint_url": "/api/v1/schools/edfacts/assessments/{year}/{grade_edfacts}/special-populations/",
            "section": "Schools",
            "class_name": "EDFacts",
            "topic": "State Assessments",
            "sub_topic": "By grade and special populations",
            "datasource_id": 8,
            "years_available": "2009&ndash;2018, 2020",
            "description": "This endpoint contains school-level achievement results for state assessments in mathematics and reading or language arts, by grade and special population subgroups. It includes the number of students who completed each assessment for whom a proficiency level was assigned and the proficiency share. The proficiency share is reported as a range, unless there are more than 300 students in the subgroup, with the magnitude of the range decreasing as the number of students reported increases. Special population subgroups include children with one or more disabilities, economically disadvantaged students, students who are homeless, migrant students, and students with limited English proficiency. Beginning in 2017, special population subgroups also include students who are in foster care and students who are military connected. States can change their statewide assessments, academic standards, or thresholds for proficiency levels, leading to changes in the proficiency share from year to year. The proficiency shares for Virginia's 2016&ndash;17 grade 5&ndash;8 math assessments are too low. Users should instead refer to the Virginia Department of Education's Statistics and Reports <a href=\"http://www.doe.virginia.gov/statistics_reports/index.shtml\">website</a> for accurate data.",
            "var_list_id": 48,
            "stata_code": "educationdata using \\\"school edfacts assessments special-populations\\\", sub(year=2009 grade_edfacts=6)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"edfacts\\\",\\ntopic = \\\"assessments\\\",\\nfilters = list(year = 2009, grade_edfacts = 6),\\nsubtopic = list(\\\"special-populations\\\"))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 100,
            "page_id": 2,
            "order": 60,
            "example_endpoint_url": "/api/v1/schools/edfacts/grad-rates/2014/",
            "endpoint_url": "/api/v1/schools/edfacts/grad-rates/{year}/",
            "section": "Schools",
            "class_name": "EDFacts",
            "topic": null,
            "sub_topic": "Adjusted Cohort Graduation Rates",
            "datasource_id": 8,
            "years_available": "2010&ndash;2019",
            "description": "This endpoint contains school-level adjusted cohort graduation rates.  The graduation rate is reported as a range, with the magnitude of the range decreasing as the number of students reported increases. Graduation rates are provided by race and special populations.",
            "var_list_id": 68,
            "stata_code": "educationdata using \\\"school edfacts grad-rates\\\", sub(year=2014)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"edfacts\\\",\\ntopic = \\\"grad-rates\\\",\\nfilters = list(year = 2014))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 88,
            "page_id": 2,
            "order": 61,
            "example_endpoint_url": "/api/v1/schools/nhgis/census-2010/2016/",
            "endpoint_url": "/api/v1/schools/nhgis/census-2010/{year}/",
            "section": "Schools",
            "class_name": "NHGIS",
            "topic": "Geographic Variables",
            "sub_topic": "2010 Census geographies",
            "datasource_id": 9,
            "years_available": "1986&ndash;2021",
            "description": "This endpoint contains geographic variables corresponding to 2010 Census geographies for each school in the CCD directory. Geographies are merged on by latitude and longitude when available; when unavailable, latitudes and longitudes were obtained from address information using Urban's geocoder. The geocoder uses StreetMap Premium from Esri to perform accurate offline geocoding. Geocode accuracy variables indicate the degree of precision of this geocoding. Additional information on the match accuracy can be found <a href=\"https://developers.arcgis.com/rest/geocode/api-reference/geocoding-service-output.htm\">here</a>.  Geographies for older years of data or low-accuracy geocode matches should be used with caution. In addition, we link schools' geographic locations to the geographic boundaries of school districts.",
            "var_list_id": 54,
            "stata_code": "educationdata using \\\"school nhgis census-2010\\\", sub(year=2009)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"nhgis\\\",\\ntopic = \\\"census-2010\\\",\\nfilters = list(year = 2009))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 89,
            "page_id": 2,
            "order": 62,
            "example_endpoint_url": "/api/v1/schools/nhgis/census-2000/2016/",
            "endpoint_url": "/api/v1/schools/nhgis/census-2000/{year}/",
            "section": "Schools",
            "class_name": "NHGIS",
            "topic": "Geographic Variables",
            "sub_topic": "2000 Census geographies",
            "datasource_id": 9,
            "years_available": "1986&ndash;2021",
            "description": "This endpoint contains geographic variables corresponding to 2000 Census geographies for each school in the CCD directory. Geographies are merged on by latitude and longitude when available; when unavailable, latitudes and longitudes were obtained from address information using Urban's geocoder. The geocoder uses StreetMap Premium from Esri to perform accurate offline geocoding. Geocode accuracy variables indicate the degree of precision of this geocoding. Additional information on the match accuracy can be found <a href=\"https://developers.arcgis.com/rest/geocode/api-reference/geocoding-service-output.htm\">here</a>.  Geographies for older years of data or low-accuracy geocode matches should be used with caution. In addition, we link schools' geographic locations to the geographic boundaries of school districts.",
            "var_list_id": 55,
            "stata_code": "educationdata using \\\"school nhgis census-2000\\\", sub(year=2009)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"nhgis\\\",\\ntopic = \\\"census-2000\\\",\\nfilters = list(year = 2009))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 90,
            "page_id": 2,
            "order": 63,
            "example_endpoint_url": "/api/v1/schools/nhgis/census-1990/2016/",
            "endpoint_url": "/api/v1/schools/nhgis/census-1990/{year}/",
            "section": "Schools",
            "class_name": "NHGIS",
            "topic": "Geographic Variables",
            "sub_topic": "1990 Census geographies",
            "datasource_id": 9,
            "years_available": "1986&ndash;2021",
            "description": "This endpoint contains geographic variables corresponding to 1990 Census geographies for each school in the CCD directory. Geographies are merged on by latitude and longitude when available; when unavailable, latitudes and longitudes were obtained from address information using Urban's geocoder. The geocoder uses StreetMap Premium from Esri to perform accurate offline geocoding. Geocode accuracy variables indicate the degree of precision of this geocoding. Additional information on the match accuracy can be found <a href=\"https://developers.arcgis.com/rest/geocode/api-reference/geocoding-service-output.htm\">here</a>.  Geographies for older years of data or low-accuracy geocode matches should be used with caution. In addition, we link schools' geographic locations to the geographic boundaries of school districts.",
            "var_list_id": 56,
            "stata_code": "educationdata using \\\"school nhgis census-1990\\\", sub(year=2009)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"nhgis\\\",\\ntopic = \\\"census-1990\\\",\\nfilters = list(year = 2009))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        },
        {
            "endpoint_id": 127,
            "page_id": 2,
            "order": 64,
            "example_endpoint_url": "/api/v1/schools/meps/2017/",
            "endpoint_url": "/api/v1/schools/meps/{year}/",
            "section": "Schools",
            "class_name": "MEPS",
            "topic": null,
            "sub_topic": "School Poverty Measure",
            "datasource_id": 13,
            "years_available": "2013&ndash;2020",
            "description": "This endpoint contains school-level poverty information including original and modified MEPS, standard errors, and annual weighted percentiles.",
            "var_list_id": 86,
            "stata_code": "educationdata using \\\"school meps\\\", sub(year=2017)",
            "r_code": "get_education_data(level = \\\"schools\\\",\\nsource = \\\"meps\\\",\\nfilters = list(year = 2017))",
            "python_code": "for pydir, _, pyfiles in os.walk(cur_path):\n    for pyfile in pyfiles:\n        if pyfile.endswith(\".py\") and pyfile not in ignore_set:\n            totalpath = os.path.join(pydir, pyfile)\n            loclist.append( ( len(open(totalpath, \"r\").read().splitlines()),\n                               totalpath.split(cur_path)[1]) )\n\nfor linenumbercount, filename in loclist: \n    print \"%05d lines in %s\" % (linenumbercount, filename)",
            "js_code": " for (ii = 0; ii < num_words; ii++) {\n  position = Math.floor(Math.random() * LoremIpsum.WORDS.length);\n  word = LoremIpsum.WORDS[position];\n  \n  if (ii > 0 && words[ii - 1] === word) {\n   ii -= 1;\n   \n  } else {\n   words[ii] = word;\n  }\n }",
            "hide": 0
        }
    ]
}